<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>блог берлинца со стажем on andron13</title><link>https://andron13.de/</link><description>Recent content in блог берлинца со стажем on andron13</description><generator>Hugo -- gohugo.io</generator><language>ru</language><lastBuildDate>Fri, 06 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://andron13.de/index.xml" rel="self" type="application/rss+xml"/><item><title>Бесплатные уроки Java online. 01 - Установка JDK и рабочего окружения</title><link>https://andron13.de/school/java/basic-course/001-java-setup/</link><pubDate>Sun, 06 Sep 2020 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/001-java-setup/</guid><description>HelloWorld.java — первая программа на Java — введение в Java 001 # Короткая инструкция, для тех кто нетерпелив # Для работы с Java в моём курсе нам понадобится:
JDK - Java Development Kit. Без этого Java-код на компьютере не запускается. IntelliJ IDEA Community Edition. Та программа, в которой я пишу код. Подробности в длинной инструкции.
Установка JDK # В интернете существуют тысячи инструкций по установке рабочего окружения для работы в Java.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/006-java-switch-case/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/006-java-switch-case/</guid><description>Switch и Case: оператор выбора — введение в Java 006 # В этом уроке мы рассмотрим на примерах оператор выбора Switch и опции выбора Case.
Пример:
За пятёрку в четверти по математике папа обещал мне велосипед. За четвёрку в четверти по математике мама купит мне GoPro4. За тройку меня, наверное, не будут ругать. За двойку меня отругают. За единицу меня &amp;ldquo;убьют&amp;rdquo;. Опять двойка Типичный жизненный пример, который можно написать на Java:</description></item><item><title/><link>https://andron13.de/school/java/basic-course/007-java-if-else/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/007-java-if-else/</guid><description>Условный оператор if, if-else — введение в Java 007 # если, то В прошлом уроке я рассматривал оператор выбора Switch. Оператор IF имеет схожие функции и примерно те же цели. Основные отличия — в используемых условиях. Кстати, как обычно, верить мне необязательно: можно спросить у Google, например &amp;ldquo;java switch vs if сравнение&amp;rdquo;. Только на Хабре я нашёл несколько статей, рассматривающих эстетическую сторону вопроса, вопрос скорости, эффективности и вопрос используемых методов.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/008-java-modulo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/008-java-modulo/</guid><description>Modulo — модуль деления, введение в Java 008 # Modulo — в специализированной литературе &amp;ldquo;modulo&amp;rdquo; называется оператором деления по модулю или взятием модуля деления. В Java обозначается знаком &amp;ldquo;процентов&amp;rdquo; - %.
Используется это в программировании, например для перевода десятичных чисел в двоичные. Не надо путать этот оператор с делением &amp;ldquo;/&amp;rdquo;. Замечу, что в Википедии на данный момент по запросу modulo выводится статья про &amp;ldquo;деление с остатком&amp;rdquo; . На мой взгляд это очень сильно дезориентирующие определение.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/009-java-arithmetic-operators/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/009-java-arithmetic-operators/</guid><description>Операторы в Java — введение в Java 009 # Мы уже использовали многое в наших программах не задумываясь. Например знаками знакомыми нам из школьной математики: +, -, = и др.. Пришло время узнать весь список доступных в Java операторов и применение.
Заранее скажу, что для введения в Java достаточно понимать первые две таблицы - арифметические операторы и операторы сравнения.
Арифметические операторы - arithmetic operators # Оператор Пример использования Пояснение + a + b Сложение - a - b Вычитание (также унарный минус) * a * b Умножение / a / b Деление % a % b Деление по модулю ++ a++ Инкремент, а++ соответствует а = а + 1 &amp;ndash; a&amp;ndash; Декремент, а&amp;ndash; соответствует а = а - 1 += a += b Сложение с присваиванием Выражение a += b эквивалентно значению a = a + b.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/010-java-for/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/010-java-for/</guid><description>Цикл FOR — введение в Java 010 # петля Каждый день я встаю в шесть утра и иду на завод к восьми, в семь вечера я уже снова дома, смотрю кино по телевизору, курю с соседом на лестничной клетке и в одиннадцать уже иду спать. Утром вторника повторяется всё то же самое, и в среду, и в четверг, и в пятницу.
Всё это можно описать, например, с помощью блока if else.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/037-java-assert/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/037-java-assert/</guid><description>public class Test { public static void main(String[] args) { System.out.println(sum(1922222225, 1922222225)); } // Calculates the sum of a (int) + b (int) and returns the result (int). public static int sum(int a, int b) { assert (Integer.MAX_VALUE - a &amp;gt;= b) : &amp;quot;Value of &amp;quot; + a + &amp;quot; + &amp;quot; + b + &amp;quot; is too large to add.&amp;quot;; final int result = a + b; assert (result - a == b) : &amp;quot;Sum of &amp;quot; + a + &amp;quot; + &amp;quot; + b + &amp;quot; returned wrong sum &amp;quot; + result; return result; } } https://askdev.</description></item><item><title>01 - логика</title><link>https://andron13.de/school/java/exercises/01-exercises-java/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/exercises/01-exercises-java/</guid><description>Задачи Java Boolean, введение — 01 # Большие проекты развивают кругозор. Маленькие задачи тренируют мастерство. Множественное повторение одного действия позволяет выполнять его на автоматизме не задумываясь. Решение задач помогает закрепить пройденный материал и поддерживать себя в форме.
Задачи на усвоение булевых значений в Java. Достаточно знать тип данных boolean, желательно(рекомендуется) знать условный оператор if-else.
Родители Васи Сидорова купили умный сейф и запрограммировали его на выдачу денег по отпечатку пальцев одного из родителей.</description></item><item><title>02 - Switch</title><link>https://andron13.de/school/java/exercises/02-exercises-java/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/exercises/02-exercises-java/</guid><description>Закрепление материала, введение — 02 # методы и классы в Java простые типы данных Switch Задачи # 1. Диапазон # Даны два целых числа. Верните true, если одно из этих чисел находится в диапазоне от 10 до 20 включительно.
2. Степень числа # Возведите число n во вторую степень
digitPow(5) -&amp;gt; 25 digitPow(10) -&amp;gt; 100 digitPow(4) -&amp;gt; 16 3. getStringMonth # Написать метод String getStringMonth(int month),который принимает номер месяца, а возвращает название.</description></item><item><title>03 - If, else</title><link>https://andron13.de/school/java/exercises/03-exercises-java/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/exercises/03-exercises-java/</guid><description>Задачи. If, if else введение - 03 # Требуется знание простых типов данных, String, if-else
Даны два целых числа, верните большее из двух. Если числа равны, то верните ноль. moreOrLess(5, 6) -&amp;gt; 6 moreOrLess(5, 5) -&amp;gt; 0 moreOrLess(0, 100) -&amp;gt; 100 Даны три целых числа, верните их сумму. Если первое и третье числа равны друг другу, то верните второе, если сумма равна нулю, то верните -1. mySum(5, 6, 5) -&amp;gt; 6 mySum(5, 6, 7) -&amp;gt; 18 mySum(0, 0, 0) -&amp;gt; 0 mySum(0, -5, 5) -&amp;gt; -1 Дан строковый литерал.</description></item><item><title>04 - повторение</title><link>https://andron13.de/school/java/exercises/04-exercises-java/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/exercises/04-exercises-java/</guid><description>Задачи для повторения и закрепления — 04 # Давайте попробуем написать методы для вычисления площади и периметра фигур: квадрата, прямоугольника, треугольника, круга. И один раз напишем их исполняющими, а один раз возвратными. В обоих случаях методы должны принимать необходимые данные для вычисления: как радиус, длину сторон или прочее. Даны натуральные числа от a = 35 до b = 87. Вывести на консоль те из них, которые при делении на 7 дают остаток 1, 2 или 5.</description></item><item><title>05 -</title><link>https://andron13.de/school/java/basic-course/005-java-boolean/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/005-java-boolean/</guid><description>Тип данных boolean и логические операторы — введение в Java 005 # Правда или ложь Boolean # Boolean в Java — это логический тип данных. Переменная типа boolean может принимать всего два значения — это правда или ложь — true &amp;amp; false. Эти два значения обозначаются в других языках и часто выдаются на экран как 1 и 0, но всё же не равны этим значениям: например, выражение boolean b = 0; приведёт к ошибке при компиляции программы.</description></item><item><title>05 - цикл for</title><link>https://andron13.de/school/java/exercises/05-exercises-java/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/exercises/05-exercises-java/</guid><description>Задачи. Цикл for, введение — 05 # Задачи на закрепление основ программирования. Требуется знание простых типов данных, String, switch, if-else, for
Закрепление изученного # 1. Счастливый пельмень # Существует такая традиция: при приготовлении пельменей в один из них кладут монетку на счастье. Считается, что тому, кому попадется пельмень с монеткой, улыбнется удача.
Представим, что у нас есть кастрюля, в которой лежит 10 пельменей. Один из них счастливый — а именно пятый пельмень.</description></item><item><title>06 - Nested Loops</title><link>https://andron13.de/school/java/exercises/06-exercises-java/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/exercises/06-exercises-java/</guid><description>Вложенные циклы (Nested Loops) — 06 # 1. Прямоугольник # При вызове метода rectangle(5, 7); на экране появился прямоугольник. Что написано в методе rectangle?
******* ******* ******* ******* ******* 2. Трое неизвестных # нужно написать алгоритм вывода на экран всех возможных комбинаций 3-х натуральных чисел до 36 с определенными условиями:
необходимо использовать вложенные циклы x &amp;lt;= y &amp;lt;= z xyz = 36 например:
x=1, y=1, z=36 x=1; y=3; z=12 3.</description></item><item><title>07 - Modulo</title><link>https://andron13.de/school/java/exercises/07-exercises-java/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/exercises/07-exercises-java/</guid><description>Двоичные системы счисления, Modulo — 07 # В одном KByte(килобайт) - 1000 Byte(10^3). В одном KiB(кикибайт) - 1024 Byte(2^10). Напишите программу, которая например из 100.000 байтов вычисляет сколько это целых KByte(килобайт) и оставшихся Byte. Напишите программу подсчёта (обмана) разницы маркетинговых гигабайт с гигабайтами. Сколько &amp;ldquo;программистских&amp;rdquo; или двоичных мебибайт в десятичных гигабайтах. Написать программу, которая нам переводит любое десятичное число в двоичное. Напишите программу для перевода из двоичных в десятичные.</description></item><item><title>09 - многомерные</title><link>https://andron13.de/school/java/exercises/09-exercises-java/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/exercises/09-exercises-java/</guid><description>Многомерные массивы, введение — 09 # Перепишите метод monthCalendar используя метод цикл фор ич. Создать таблицу умножения(Пифагора) для младших классов. Таблица Пифагора Создать поле для игры в сапёров с типом данных на выбор. Например boolean со значениями false. Размером 100 на 100. И раставить 20 случайных бомб (true). Распечатайте координаты бомб. Создайте String массив случайного размера в диапазоне (10-100). Заполните его случайными строками(паролями?, логинами?</description></item><item><title>10 - WarmUp</title><link>https://andron13.de/school/java/exercises/10-exercises-java/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/exercises/10-exercises-java/</guid><description>Задачи на закрепления всех основных конструкций — 10 # The parameter weekday is true if it is a weekday, and the parameter vacation is true if we are on vacation. We sleep in if it is not a weekday or we&amp;rsquo;re on vacation. Return true if we sleep in. sleepIn(false, false) → true sleepIn(true, false) → false sleepIn(false, true) → true Given an int n, return the absolute difference between n and 21, except return double the absolute difference if n is over 21.</description></item><item><title>11 - Logic-1</title><link>https://andron13.de/school/java/exercises/11-exercises-java-logic-01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/exercises/11-exercises-java-logic-01/</guid><description>Задачи на логику, на английском - уно # When squirrels get together for a party, they like to have cigars. A squirrel party is successful when the number of cigars is between 40 and 60, inclusive. Unless it is the weekend, in which case there is no upper bound on the number of cigars. Return true if the party with the given values is successful, or false otherwise. cigarParty(30, false) → false cigarParty(50, false) → true cigarParty(70, true) → true You are driving a little too fast, and a police officer stops you.</description></item><item><title>12 - Logic-2</title><link>https://andron13.de/school/java/exercises/12-exercises-java-logic-02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/exercises/12-exercises-java-logic-02/</guid><description>Задачи на логику - дос # We want to make a row of bricks that is goal inches long. We have a number of small bricks (1 inch each) and big bricks (5 inches each). Return true if it is possible to make the goal by choosing from the given bricks. This is a little harder than it looks and can be done without any loops. See also: Introduction to MakeBricks makeBricks(3, 1, 8) → true makeBricks(3, 1, 9) → false makeBricks(3, 2, 10) → true Given 3 int values, a b c, return their sum.</description></item><item><title>14 - String-2</title><link>https://andron13.de/school/java/exercises/14-exercises-java-string-02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/exercises/14-exercises-java-string-02/</guid><description>Доброе день, String - дос # Given a string, return a string where for every char in the original, there are two chars. doubleChar(&amp;quot;The&amp;quot;) → &amp;quot;TThhee&amp;quot; doubleChar(&amp;quot;AAbb&amp;quot;) → &amp;quot;AAAAbbbb&amp;quot; doubleChar(&amp;quot;Hi-There&amp;quot;) → &amp;quot;HHii--TThheerree&amp;quot; Return the number of times that the string &amp;ldquo;code&amp;rdquo; appears anywhere in the given string, except we&amp;rsquo;ll accept any letter for the &amp;rsquo;d', so &amp;ldquo;cope&amp;rdquo; and &amp;ldquo;cooe&amp;rdquo; count. countCode(&amp;quot;aaacodebbb&amp;quot;) → 1 countCode(&amp;quot;codexxcode&amp;quot;) → 2 countCode(&amp;quot;cozexxcope&amp;quot;) → 2 Return true if the given string contains a &amp;ldquo;bob&amp;rdquo; string, but where the middle &amp;lsquo;o&amp;rsquo; char can be any char.</description></item><item><title>15 - String-3</title><link>https://andron13.de/school/java/exercises/15-exercises-java-string-03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/exercises/15-exercises-java-string-03/</guid><description>Добрый вечер, String - трес # Given a string, count the number of words ending in &amp;lsquo;y&amp;rsquo; or &amp;lsquo;z&amp;rsquo; &amp;ndash; so the &amp;lsquo;y&amp;rsquo; in &amp;ldquo;heavy&amp;rdquo; and the &amp;lsquo;z&amp;rsquo; in &amp;ldquo;fez&amp;rdquo; count, but not the &amp;lsquo;y&amp;rsquo; in &amp;ldquo;yellow&amp;rdquo; (not case sensitive). We&amp;rsquo;ll say that a y or z is at the end of a word if there is not an alphabetic letter immediately following it. (Note: Character.isLetter(char) tests if a char is an alphabetic letter.</description></item><item><title>18 - Array-1</title><link>https://andron13.de/school/java/exercises/18-exercises-java-arrays-01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/exercises/18-exercises-java-arrays-01/</guid><description>Закрепление массивов, Java-Basic # Given an array of ints, return true if 6 appears as either the first or last element in the array. The array will be length 1 or more.
Дан массив int. Верните true, если цифра 6 является значением в первом или последнем элементе массива. Массив будет длиной больше, либо равной единице.
firstLast6([1, 2, 6]) → true firstLast6([6, 1, 2, 3]) → true firstLast6([13, 6, 1, 2, 3]) → false Given 2 arrays of ints, a and b, return true if they have the same first element or they have the same last element.</description></item><item><title>19 - Array-2</title><link>https://andron13.de/school/java/exercises/19-exercises-java-arrays-02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/exercises/19-exercises-java-arrays-02/</guid><description>Закрепление массивов, Java-Basic, Array-3 # Закрепление массивов, Java-Basic # Return the number of even ints in the given array. Note: the % &amp;ldquo;mod&amp;rdquo; operator computes the remainder, e.g. 5 % 2 is 1. countEvens([2, 1, 2, 3, 4]) → 3 countEvens([2, 2, 0]) → 3 countEvens([1, 3, 5]) → 0 Return the sum of the numbers in the array, returning 0 for an empty array. Except the number 13 is very unlucky, so it does not count and numbers that come immediately after a 13 also do not count.</description></item><item><title>2</title><link>https://andron13.de/school/java/basic-course/002-java-integers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/002-java-integers/</guid><description>Простые типы данных — byte, short, int, long, в примерах — введение в Java 002 # Чтобы вызвать на экран что-то большее, чем &amp;ldquo;Привет, Мир!&amp;rdquo;, надо работать с числами, символами и буквами. Чтобы работать с ними в Java — надо научиться их хранить и передавать. Для этого нам надо познакомиться с понятием &amp;ldquo;типы данных&amp;rdquo;, а точнее &amp;ldquo;простые типы данных&amp;rdquo;.
Простые типы данных — Java Primitives # Существуют следующие базовые типы данных: byte, short, int, long, float, double, char, boolean и String (не совсем примитив, но базовый тип данных).</description></item><item><title>20 - Array-3</title><link>https://andron13.de/school/java/exercises/20-exercises-java-arrays-03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/exercises/20-exercises-java-arrays-03/</guid><description>Закрепление массивов, Java-Basic, Array-3 # Consider the leftmost and righmost appearances of some value in an array. We&amp;rsquo;ll say that the &amp;ldquo;span&amp;rdquo; is the number of elements between the two inclusive. A single value has a span of 1. Returns the largest span found in the given array. (Efficiency is not a priority.) maxSpan([1, 2, 1, 1, 3]) → 4 maxSpan([1, 4, 2, 1, 4, 1, 4]) → 6 maxSpan([1, 4, 2, 1, 4, 4, 4]) → 6 Given a non-empty array, return true if there is a place to split the array so that the sum of the numbers on one side is equal to the sum of the numbers on the other side.</description></item><item><title>3</title><link>https://andron13.de/school/java/basic-course/003-java-float-double/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/003-java-float-double/</guid><description>Типы данных с плавающей точкой: float и double — введение в Java 003 # Числа с плавающей точкой # Для хранения дробных чисел в Java используют float и double. Правильное название — простые (примитивные) типы данных с плавающей точкой. Примитивные типы данных — byte, short, int, long, которые являются целыми числами, — мы рассматривали - здесь.
число Пи Float # Давайте сразу рассмотрим практический пример:</description></item><item><title>4</title><link>https://andron13.de/school/java/basic-course/004-java-char-string/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/004-java-char-string/</guid><description>Типы данных char и String: примеры применения — введение в Java 004 # Char # Таблица символов Если в программе нужны символы, то для этого мы пользуемся типом данных char. Например:
public class HelloChar { public static void main(String[] args) { char zahl = 100; // Сотый по счёту символ в таблице char octal = &amp;#39;\u039A&amp;#39;; // Вызов определённого символа кодом char zeichen = &amp;#39;A&amp;#39;; // Буква A char tabulator = &amp;#39;\t&amp;#39;; // В русском языке клавиша называется &amp;#34;Таб&amp;#34; // Табулятор char phi = &amp;#39;\u03A6&amp;#39;; // Греческая буквая Фита - PHI System.</description></item><item><title>SQL запросы</title><link>https://andron13.de/school/database/05-sql-select-requests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/database/05-sql-select-requests/</guid><description>SQL запросы # Gegeben ist die folgende Artikel-Tabelle. Nachfolgend wird diese Tabelle mittels Select-Anweisung abgefragt.
id bezeichnung farbe einkaufsPreis lieferant bestand 114629 Kaschmir Rosé 6,95 Lana Grossa 386 114670 Cotonara Weiß 4,95 Lana Grossa 124 114324 Eco Vitas Hellgelb 3,50 ONline 956 114339 Cotton Baby Apricot 2,95 ONline 45 112999 Kaschmir Anthrazit 11,95 Junghans 39 111072 Cotonara Beige 2,95 Junghans 428 https://web.</description></item><item><title>StringBuffer, StringBuilder и String в чём отличие</title><link>https://andron13.de/school/java/basic-course/026-java-string-stringbuffer-stringbuilder/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/026-java-string-stringbuffer-stringbuilder/</guid><description>#String, StringBuffer и StringBuilder — введение в Java 026
(В разработке)
Нас уже не должны пугать ключевые слова с большой буквы. Нам известны как минимум два из них String и Scanner. StringBuffer и StringBuilder родные братья уже давно изученного типа данных String.
Чем был плох String? # String всем прекрасен, только он неизменяем (immutable). И операции со строковыми величинами иногда дороги в потреблении ресурсов. Например, если мы в цикле изменяем строку добавляя к ней символы.</description></item><item><title>Введение в HTML - HelloWorld</title><link>https://andron13.de/school/html/02-html-hello-world/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/html/02-html-hello-world/</guid><description>Теперь мы попробуем приветствовать мир
Привет-мир # Создаём рабочую папку В папке создаём файл &amp;ldquo;first-page.html&amp;rdquo; Если у вас проблемы с созданием файла с расширением html, то вам нужны курсы по компьютерной грамотности и с интернетом пока стоит повременить. Вы можете, конечно, попробовать создать этот файл с помощью запроса в google &amp;ldquo;как создать html файл&amp;rdquo;. Рекомендую параллельно к этому пособию вообще нагугливать термины и объяснения из альтернативных источников. А вдруг я не прав, а вдруг всё уже поменялось?</description></item><item><title>Как правильно создавать пароли</title><link>https://andron13.de/school/tools/04-how-to-create-passwords/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/tools/04-how-to-create-passwords/</guid><description>Немного о паролях, или как их правильно создавать
-Вы слабое звено! И вы выбываете из игры!
Можно добавить ещё пару анекдотов, чтобы правда жизни не так резала по сердцу.
Однако. Здравствуйте. При самом крутом алгоритме шифрования пароль &amp;ldquo;мама&amp;rdquo; вскрывается за одну секунду. Также не стоит ставить паролем свой день рождения. Если бы вы знали сколько мужей погорело на различных Love-порталах, выбравших свой день рождения паролем. А недовольных дворецких и секретарш на пенсии, тоже ещё никто не удосужился отменить.</description></item><item><title>Настройка, горячие клавиши, debugging в IntelliJ IDEA</title><link>https://andron13.de/school/java/basic-course/025-java-idea-basics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/025-java-idea-basics/</guid><description>IntelliJ IDEA — настройка, горячие клавиши, debugging — введение в Java 025 # (В разработке)
Сегодняшний программист очень сильно отличается от программиста 90-х.
Блокноты сменились мощными инструментами, которые подсказывают нам даже эффективные методы решения. Порой, кажется, что ещё чуть-чуть и людям точно не надо будет учить программирование, потому что Idea сделает всё сама.
Но пока этого не случилось нам стоит потратить немного времени на настройку самого главного инструмента, в котором мы пишем код.</description></item><item><title>Обмен значений переменных в Java</title><link>https://andron13.de/school/java/basic-course/024-java-swap-two-variables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/024-java-swap-two-variables/</guid><description>Обмен значений переменных — введение в Java 024 # Допустим у нас есть переменная A со значением 5 и переменная B со значением 3. И нам нужно поменять значения у переменных местами. Это достаточно часто используемая операция и есть далеко не один способ её реализации.
int a = 5; int b = 7; int temp = a; a = b; b = temp; Мы создаём дополнительную переменную. Передаём ей временно для хранения значение A, в само A передаём значение B.</description></item><item><title>Относительные и абсолютные пути - введение в HTML</title><link>https://andron13.de/school/html/03-html-path/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/html/03-html-path/</guid><description>Относительные и абсолютные пути # С HTML у нас будет очень много различных файлов и папок, и изображений, и стилей. Поэтому нам надо понять как именно можно указывать месторасположение наших ресурсов.
Четыре варианта, которые указывают на то, где лежит файл.
1. &amp;#34;styles.css&amp;#34; 2. &amp;#34;./styles.css&amp;#34; 3. &amp;#34;./../styles.css&amp;#34; 4. &amp;#34;/my_styles/styles.css&amp;#34; 5. &amp;#34;http://www.povar.eu/style.css&amp;#34; Первый и второй вариант пытаются указать на один и тот же файл, который лежит в этой же папке. Третий вариант ищет файл на один уровень выше.</description></item><item><title>Пузырьковая сортировка — Bubble Sort. Алгоритмы сортировок.</title><link>https://andron13.de/school/java/basic-course/027-java-sorting-algorithms-01-bubblesort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/027-java-sorting-algorithms-01-bubblesort/</guid><description>Алгоритмы сортировок, Bubble Sort — введение в Java 027 # массив требующий сортировки Представьте себе ситуацию, что вы просите свой компьютер отсортировать фотографии по размеру или занимаемому месту, товары на странице магазина по цене и новости на сайте по дате написания.
Все эти данные, массивы информации сортируются. Сейчас мы попробуем написать простейший алгоритм сортировки массива состоящего из чисел.
Пузырьковая сортировка # В пузырьковой сортировке мы по очереди просматриваем попарно весь массив.</description></item><item><title>Уроки HTML и CSS Online</title><link>https://andron13.de/school/html/01-html-intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/html/01-html-intro/</guid><description>Веб-девелопмент — пособие для начинающих # Предисловие # Свой первый сайт я сделал ещё в 96-м году. Просто скопировав исходники с сайта модного компьютерного журнала и поставив их на свой. Принципиально это не самый плохой способ. Подсмотреть и сделать лучше. Что бы понять как это работает — просмотр чужих примеров просто обязателен.
Последние пару лет слово пример практически не используется в моём IT-круге. Принято говорить кейсы, кейс клиентa, пользовательский кейс.</description></item><item><title>Java-OOP 02 - Перегрузка методов в Java Overloadin</title><link>https://andron13.de/school/java/oop-course/002-java-oop-method-overloading-polymorphism/</link><pubDate>Fri, 06 Nov 2020 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/oop-course/002-java-oop-method-overloading-polymorphism/</guid><description>Перегрузка методов (Method Overloading) # В Java несколько методов из одного класса могут иметь одно название.
Одно название и несколько методов # Давайте сразу рассмотрим пример.
public class Calculator { public static int addition(int a, int b) { return a + b; } public static double addition(double a, double b) { return a + b; } } Очевидное-невероятное, но Java сама выбирает подходящий метод, для решения проблемы.Если мы передадим ей два int, то выберется первый метод, если два double, то JDK выберет самостоятельно нижний метод.</description></item><item><title>Java-OOP 03 - Конструктор в Java и ключевое слово this - введение в Java-OOP</title><link>https://andron13.de/school/java/oop-course/003-java-oop-constructor-this/</link><pubDate>Fri, 06 Nov 2020 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/oop-course/003-java-oop-constructor-this/</guid><description>Конструктор в Java и ключевое слово this- введение в Java-OOP 003 # Стройка Создание объектов в Java часто сравнивает с обычной стройкой в жизни. И английский constructor и русский конструктор связаны со строительством напрямую.
Принципиально, конструктор - это просто метод. Просто метод который создаёт объекты. В связи с тем, что это очень важный метод и является краеугольным камнем всей парадигмы ООП, то у этого метода есть привилегия.</description></item><item><title>Java-OOP 04 - Инкапсуляция - encapsulation</title><link>https://andron13.de/school/java/oop-course/004-java-oop-encapsulation-get-set/</link><pubDate>Fri, 06 Nov 2020 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/oop-course/004-java-oop-encapsulation-get-set/</guid><description>Инкапсуляция - encapsulation # В слове инкапсуляция корень капсула. Если мы спрячем в &amp;ldquo;капсулу&amp;rdquo; параметры объекта, то это и будет инкапсуляцией.
Инкапсуляция - encapsulation Зачем нужна инкапсуляция? # Во-первых, к некоторым параметрам не должно быть доступа ни у других программ, ни у пользователей, ни у (даже!) программистов. Например:
Поле день рождения в программе паспортного стола. Посмотреть его можно. Изменить нельзя. Это поле должно быть создано в месте с записью о человеке и позже его менять нельзя.</description></item><item><title>Java-OOP 05 - наследование - inheritance</title><link>https://andron13.de/school/java/oop-course/005-java-oop-inheritance/</link><pubDate>Fri, 06 Nov 2020 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/oop-course/005-java-oop-inheritance/</guid><description>Наследование - inheritance # При разработке приложения для предприятия мы можем столкнуться с тем, что у различных профессий или должностей существуют различные параметры(поля класса) и поведение(методы).
Простейший пример университет. В нём есть студенты, преподаватели, научные и технические работники. У всех этих преподавателей должен быть пропуск. Например в зависимости от типа пропуска различные скидки в университетской столовой(например).
Давайте создадим класс Студента, Препода, и Работника.
public class Student { private String firstName; private String secondName; private String uniID; void study(){ } } public class Teacher { private String firstName; private String secondName; private String uniID; void teach(){ } } public class Worker { private String firstName; private String secondName; private String uniID; void work(){ } } На самой ранней стадии написания поля мы видим, что в нашем приложении будут 3 класса, которые содержат повторяющийся код.</description></item><item><title>Java-OOP 01 - Первые объекты</title><link>https://andron13.de/school/java/oop-course/001-java-object-introduction-chapter-1/</link><pubDate>Sun, 06 Sep 2020 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/oop-course/001-java-object-introduction-chapter-1/</guid><description>Первые объекты в Java - введение в Java-OOP 001 # Введение в объектно-ориентированное программирование(Object-Oriented Programming) продолжает курс - Басовый курс Java.
Java является объектно-ориентированным языком. Хотя на сегодня в ООП умеют играть все популярные языки. Это новшество на конец прошлого века, сегодня уже добавлено даже в старые языки, изначально не поддерживающие ООП (например php, javascript).
ООП очень важная тема. И всё что было до этого было просто разминкой перед настоящей Java.</description></item><item><title>У меня снова есть блог</title><link>https://andron13.de/posts/hello/</link><pubDate>Sun, 05 Jul 2020 19:41:02 +0200</pubDate><guid>https://andron13.de/posts/hello/</guid><description>Блогер это навсегда # Около 5 лет у меня не было блога. И вот у меня снова появилось желание, а мои возможности позволяют выбирать из большего, чем 10 лет назад.
Надеюсь до конца лета я смогу выложить свой курс введения в веб-программирование с первым языком обучения Java.
Проверьте сами, вдруг получилось. На секундочку, сам канал сделал ещё 4 года назад - 17.10.2016.
ночной берлин</description></item><item><title/><link>https://andron13.de/school/database/01-sql-intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/database/01-sql-intro/</guid><description/></item><item><title/><link>https://andron13.de/school/hidden/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/hidden/</guid><description>This page is hidden in menu # Quondam non pater est dignior ille Eurotas # Latent te facies # Lorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.
Pater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor Cum honorum Latona # O fallor in sustinui iussorum equidem.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/011-java-string-possibilities-and-more/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/011-java-string-possibilities-and-more/</guid><description>Возможности различных типов данных, литералов в Java — введение в Java 011 # В четвёртом уроке мы затронули преобразования одних типов данных в другие. Давайте для начала посмотрим, что именно мы тогда учили.
Явные и неявные преобразования # Значения, передаваемые переменным, можно привести в тот тип данных, которые переменная может принять. Вручную или автоматически, или явно и неявно.
преобразование типов данных Расширение типа (widening Casting), которое можно проследить на схеме с помощью стрелок, происходит автоматически.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/012-java-methods-void-return/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/012-java-methods-void-return/</guid><description>Методы в Java немного подробнее: возвратные и исполняющие — введение в Java 012 # Главный метод класса # public static void main(String[] args) Каждый раз пишем эту магическую строку что бы запустить нашу программу. MAIN - обозначает точку входа в программу. Мы можем один раз написать этот метод в главном классе, например Main:
public class Main { public static void main(String[] args) { // просто тестирование } } Следующим методом мы можем написать метод сложения двух целых чисел.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/013-java-while-dowhile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/013-java-while-dowhile/</guid><description>Цикл While и Do While — введение в Java 013 # Это самая лёгкая глава. Потому что цикл while — родной брат цикла for.
Пример:
public class WhileWeAreYoung { public static void main(String[] args){ int i = 0; while(i &amp;lt; 10){ System.out.println(i); i++; } } } Изученный цикл for мы бы написали так:
public static void main(String[] args) { for (int i = 0; i &amp;lt; 10 ; i++){ System.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/014-java-scanner/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/014-java-scanner/</guid><description>Scanner — введение в Java 014 # Я хочу ввести немного магии в наши программы. Мы уже пользовались и пользуемся для вывода результатов командой System.out.println(). Возможность ввода данных через терминал в программу также существует.
import java.util.Scanner; public class WhileScanner { public static void main(String[] args) { Scanner input = new Scanner(System.in); int old; System.out.println(&amp;#34;Сколько тебе лет? &amp;#34;); old = input.nextInt(); while (old &amp;gt;= 18){ System.out.println(&amp;#34;Ты можешь купить на вечер что-то более крепкое, чем чай&amp;#34;); break; // выход из цикла } input.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/015-java-binary-and-decimal-issue/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/015-java-binary-and-decimal-issue/</guid><description>Двоичная, десятичная, восьмеричная и прочие системы в Java и преобразования между ними — введение в Java 015 # символы майя Для усвоения этого урока достаточно знать циклы for (while, do-while), оператор выбора switch, условный оператор **if **, знание и уверенное пользование арифметическим оператором modulo.
Это один из лучших примеров, который показывает, что первоначально абсолютно неподъёмная задача при решении оказывается не такой уж и страшной.
Мы уже рассматривали во главе, которая знакомила нас с while как из десятичных чисел получить двоичные.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/016-java-ternary-operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/016-java-ternary-operator/</guid><description>Тернарный оператор &amp;ldquo;?:&amp;rdquo; — введение в Java 016 # Выражение:
if (условие) { number = 10; } else { number = -10; } Можно заменить на
number = (условие) ? 10 : -10; То есть ?: укороченный условный оператор if, if-else из седьмого урока
переменная = (выражение) ? значение if true : значение if false public static void ternar(int schoolАttestat){ String resultAtHome = &amp;quot;&amp;quot;; resultAtHome = (schoolАttestat &amp;gt;= 3) ?</description></item><item><title/><link>https://andron13.de/school/java/basic-course/017-java-recursion-intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/017-java-recursion-intro/</guid><description>Рекурсивные методы в Java — введение в Java 017 # рекурсия экрана Многие из нас пытались сфотографировать себя в зеркале так, что бы в зеркале было снова изображение фотографирующего в зеркале и так до бесконечности. Это и есть частный случай рекурсии. В программировании это - метод, вызывающий(повторяющий) сам себя.
Рекурсия в программировании # Давайте попробуем найти факториал числа
public class Factorial{ static int calculateFactorial(int n){ int result = 1; for (int i = 1; i &amp;lt;=n; i ++){ result = result*i; } return result; } public static void main(String[] args){ System.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/018-java-array/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/018-java-array/</guid><description>Массивы в Java — введение в Java 018 # Давайте представим себе книжную полку на которой стоит множество книг. Или камеру хранения на вокзале со множеством ячеек. У каждой ячейки есть номер и в каждой из них может находиться чемодан.
Массив в реальной жизни - камера хранения В Java тоже есть похожие &amp;ldquo;книжные полки&amp;rdquo; или &amp;ldquo;камеры хранения&amp;rdquo;. Называются они массивами и в массиве мы можем хранить множество переменных одного типа.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/019-java-foreach/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/019-java-foreach/</guid><description>For-Each Loop — введение в Java 019 # Мы изучали цикл for, где в определённом диапазоне мы перебирали элементы. Существует брат уже изученного цикла - for each (фор ич). For each позволяет просмотреть все элементы массива не обращаясь к ним по индексу. Например:
public class Main { public static void main(String[] args) { int[] arr = new int[]{1, 2, 3, 4, 5, 6}; printArray(arr); } public static void printArray(int[] inputArray) { System.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/020-java-varargs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/020-java-varargs/</guid><description>Variable arguments - Varargs — введение в Java 020 # Давайте сложим два числа:
public class Main { public static void main(String[] args) { sum(2, 3); } private static int sum(int a, int b) { return a + b; } } Удобно находить сумму, но не очень. Ведь если надо найти сумму трёх чисел, надо писать другой метод:
public class Main { public static void main(String[] args) { sum(2, 3, 5); } private static int sum(int a, int b, int c) { return a + b + c; } } А если надо найти сумму трёх чисел?</description></item><item><title/><link>https://andron13.de/school/java/basic-course/021-java-multi-dimensional-array/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/021-java-multi-dimensional-array/</guid><description>Многомерные массивы в Java — введение в Java 021 # Давайте повторим, что такое массив
Массив # Массив — это совокупность однотипных переменных, для обращения к которым используется общее имя. Java допускает создание массивов любого типа, которые могут иметь одно или несколько измерений.
многомерный массив на примере февраля static void month() { int[][] monthCalendar; monthCalendar = new int[4][7]; for (int outer = 0; outer &amp;lt; monthCalendar.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/022-java-public-static-void-main/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/022-java-public-static-void-main/</guid><description>Что же это такое — public static void main(String[] args) — введение в Java 022 # Давайте попробуем приподнять завесу тайны с метода, который мы писали чаще всего. Надо всё-таки понимать хоть немного, то что мы пишем.
Мы уже знаем, что такое main - точка входа в нашу программу. Мы знаем что такое void - это просто метод который выполняет код. Пришло время понять, что мы знаем, что String[] args это просто переменная args, которая является строковым массивом.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/023-java-return-break-continue/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/023-java-return-break-continue/</guid><description>Операторы перехода break, continue, return — введение в Java 023 # Оператор break # пример работы оператора break С оператором break мы познакомились в шестом уроке во время знакомства с оператором выбора Switch. С помощью break мы выходим из вариантов выбора.
Прерывание цикла # С помощью break можно выходить из цикла.
public static void searchFor () { for (int i = 0; i &amp;lt;= 20; i++) { if (i == 4) { break; // выйти из цикла при i равной 4.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/028-java-sorting-algorithms-02-coctail-and-comb-sort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/028-java-sorting-algorithms-02-coctail-and-comb-sort/</guid><description>Сортировка расчёской(Combsort) и сортировка перемешиванием(Cocktail sort) — введение в Java 028 # Обе сортировки базируются на пузырьковой сортировке и вносят в неё некоторые улучшения. По этому мы их и рассмотрим вместе. Давайте начнём с коктейльной сортировки.
Сортировка перемешиванием(Cocktail sort) # Cocktail sort Cocktail sort - шейкерная сортировка, двунаправленная, коктейльная, сортировка перемешиванием.
В пузырьковой сортировке мы проходимся раз за разом, от начала массива до его конца и проверяем попарные элементы и если надо меняем их местами.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/029-java-sorting-algorithms-03-insertionsort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/029-java-sorting-algorithms-03-insertionsort/</guid><description>Сортировка вставками - Insertion Sort — введение в Java 029 # Сортировка вставками - делит условно массив на две части. В левой собирается отсортированная часть, а из правой части берутся элементы и по очереди ставятся на своё место. Пожалуй, это самый близкий метод сортировки к обычному человеческому мышлению. Берём по одному и ставим на своё место.
Часто возникает вопрос, как можно узнать, что левая часть отсортирована? Давайте представим, что у нас есть полное собрание сочинений какого-нибудь политика.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/030-java-sorting-algorithms-04-shuttlesort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/030-java-sorting-algorithms-04-shuttlesort/</guid><description>Челночная сортировка (Shuttle Sort) — введение в Java 030 # (В разработке)
public class Shuttle { public static int[] shuttleSort(int[] array) { for (int i = 0; i &amp;lt; array.length - 1; i++) { // primary pass if (array[i] &amp;gt; array[i + 1]) { int j = i - 1; int temp = array[i + 1]; // small value to move back array[i + 1] = array[i]; while (j &amp;gt;= 0 &amp;amp;&amp;amp; array[j] &amp;gt; temp) { // go back array[j + 1] = array[j]; // shuttle values forward j = j - 1; } // end secondary pass array[j + 1] = temp; // insert small value further back } // else no secondary pass } // end all passes return array; } }</description></item><item><title/><link>https://andron13.de/school/java/basic-course/031-java-sorting-algorithms-05-quicksort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/031-java-sorting-algorithms-05-quicksort/</guid><description>Быстрая сортировка, сортировка Хоара - quicksort — введение в Java 031 # (В разработке)
import java.util.Arrays; public class QuickSort { public static void quickSort(int[] array, int low, int high) { if (array.length == 0) return; //завершить выполнение, если длина массива равна 0 if (low &amp;gt;= high) return;//завершить выполнение если уже нечего делить // выбрать опорный элемент int middle = low + (high - low) / 2; int opora = array[middle]; // разделить на подмассивы, который больше и меньше опорного элемента int i = low, j = high; while (i &amp;lt;= j) { while (array[i] &amp;lt; opora) { i++; } while (array[j] &amp;gt; opora) { j--; } if (i &amp;lt;= j) {//меняем местами int temp = array[i]; array[i] = array[j]; array[j] = temp; i++; j--; } } // вызов рекурсии для сортировки левой и правой части if (low &amp;lt; j) quickSort(array, low, j); if (high &amp;gt; i) quickSort(array, i, high); } public static void main(String[] args) { int[] x = {8, 0, 4, 7, 3, 7, 10, 12, -3}; System.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/032-java-sorting-algorithms-big-o/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/032-java-sorting-algorithms-big-o/</guid><description>Оценка сложности алгоритмов, или Что такое О(log n) — введение в Java 032 # Существует множество способов сортировки данных.
Например:
Пузырьковая сортировка - Bubble Sort Сортировка перемешиванием, шейкерная сортировка, коктейльная сортировка Сортировка расчёской Сортировка выбором - Selection Sort Сортировка вставками - Insertion Sort Челночная сортировка - Shuttle Sort Сортировка Шелла - Shell sort Быстрая сортировка - quickSort Сортировка слиянием - merge sort Пирамидальная сортировка «Сортировка кучей» - Heapsort Сортировка подсчётом - Counting Sort Поразрядная сортировка - Radix Sort Первая часть этого списка перечисляет простые сортировки.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/033-java-binary-tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/033-java-binary-tree/</guid><description>Двоичное дерево — введение в Java 033 # Введение От выбора заветной пары джинсов из гардероба до выбора следующего фильма для просмотра с партнером, человеческая жизнь наполнена поиском вещей.
В то время как в повседневной жизни люди обычно ищут между несколькими, если не дюжиной вещей. Компьютерам приходится иметь дело с поиском по данным сравнительно больших объемов по их размеру и количеству.
Это требует от компьютера наличия эффективного метода для максимально эффективного поиска внутри своих массивов и коллекций.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/034-java-try-catch-finally/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/034-java-try-catch-finally/</guid><description>Exception — введение в Java 034 # Предположим, что пишем программу для кофеавтомата.
При выборе капучино, наш автомат собирает напиток из воды, кофе, молока. Мы же ему написали:
Возьми одну порцию воды Возьми одну порцию кофе Возьми порцию молока Сделай по рецепту кофе. Если одного из ингридиентов не будет, то автомат не сможет сделать кофе и возможно зависнет в ожидании ингредиентов или поломается и техник должен будет перезапускать его заново.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/035-java-creating-a-jar-file-/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/035-java-creating-a-jar-file-/</guid><description>JAR - Java Archive — введение в Java 035 # Приложения обычно делают, что бы они использовались. Java приложения обычно собираются в JAR-файл.
Думаю разумно уже сейчас узнать как собираются JAR приложения, потому что это совсем не сложно, ну и у JAR файлов есть один приятный бонус. Мы можем использовать их как собственную библиотеку.
Создание JAR # Давайте просто попробуем в IDEA создать наш JAR-файл.
Заходим в меню File -&amp;gt; Project Structure.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/036-java-ressourcen/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/036-java-ressourcen/</guid><description>Ресурсы и умение ими пользоваться — введение в Java 036 # Мы немного оторвёмся от самого кодинга и осмотримся по сторонам.
Яве исполнилось четверть века и за эти годы появилось множество статей, книг, рефератор, полезных и конечно же бесполезных ресурсов. И в этом хаосе мы попробуем найти островки логики и порядка.
Сайт Oracle - именно там лежит официальная документация к языку. Им надо научиться пользоваться и научиться читать документацию.</description></item><item><title/><link>https://andron13.de/school/java/exercises/08-exercises-java/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/exercises/08-exercises-java/</guid><description>Массивы, введение — 08 # Заполните массив случайным числами и выведете максимальное, минимальное и среднее значение. Для генерации случайного числа используйте метод Math.random(), который возвращает значение в промежутке [0, 1]. Напишите программу, которая выводит на консоль простые числа в промежутке от [2, 100]. Используйте для решения этой задачи оператор &amp;ldquo;%&amp;rdquo; (остаток от деления) и циклы. Перевести String с именем и фамилией в массив Char. Внести все чётные цифры от нуля до 100 в массив int.</description></item><item><title/><link>https://andron13.de/school/java/exercises/13-exercises-java-string-01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/exercises/13-exercises-java-string-01/</guid><description>Доброе утро, String - уно # Given a string name, e.g. &amp;ldquo;Bob&amp;rdquo;, return a greeting of the form &amp;ldquo;Hello Bob!&amp;rdquo;. helloName(&amp;quot;Bob&amp;quot;) → &amp;quot;Hello Bob!&amp;quot; helloName(&amp;quot;Alice&amp;quot;) → &amp;quot;Hello Alice!&amp;quot; helloName(&amp;quot;X&amp;quot;) → &amp;quot;Hello X!&amp;quot; Given an &amp;ldquo;out&amp;rdquo; string length 4, such as &amp;ldquo;&amp;laquo;&amp;raquo;&amp;rdquo;, and a word, return a new string where the word is in the middle of the out string, e.g. &amp;ldquo;&amp;laquo;word&amp;raquo;&amp;rdquo;. Note: use str.substring(i, j) to extract the String starting at index i and going up to but not including index j.</description></item><item><title/><link>https://andron13.de/school/java/exercises/16-exercises-java-recursion-01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/exercises/16-exercises-java-recursion-01/</guid><description>Задачи для курса Java-basic - рекурсия # Given n of 1 or more, return the factorial of n, which is n * (n-1) * (n-2) &amp;hellip; 1. Compute the result recursively (without loops).
Дано N большее либо равное 1. Вернуть факториал N = n * (n-1) * (n-2) &amp;hellip;. 1. Вычислить результат рекурсивно (без циклов). factorial(1) → 1 factorial(2) → 2 factorial(3) → 6 We have bunnies standing in a line, numbered 1, 2, &amp;hellip; The odd bunnies (1, 3, .</description></item><item><title/><link>https://andron13.de/school/java/exercises/17-exercises-java-recursion-02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/exercises/17-exercises-java-recursion-02/</guid><description>Задачи для курса Java-basic - рекурсия # Given an array of ints, is it possible to choose a group of some of the ints, such that the group sums to the given target? This is a classic backtracking recursion problem. Once you understand the recursive backtracking strategy in this problem, you can use the same pattern for many problems to search a space of choices. Rather than looking at the whole array, our convention is to consider the part of the array starting at index start and continuing to the end of the array.</description></item><item><title/><link>https://andron13.de/school/java/exercises/21-exercises-java-additional-01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/exercises/21-exercises-java-additional-01/</guid><description>Задачи от Евгения - факультатив фирмы ТелРан # Given a String with different braces, check if the order of braces is correct. Every next brace can be an opening brace or should close a previous opening brace. Given a long, check if it is a palindrom Given a string with capital letters, small letters and symbols, return a string with capital letters turned into small, ans small into capital.</description></item><item><title/><link>https://andron13.de/school/java/exercises/22-exercises-java-additional-02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/exercises/22-exercises-java-additional-02/</guid><description>Неотсортированные задачи # Дан int массив с рядом чисел с шагом один. Найти отсутствующий элемент. В случае если всё на месте вернуть минус один. Решите задачу тремя разными способами. findElements([1, 2, 4, 5, 6]) -&amp;gt; 3 findElements([0, 1, 2, 3, 5, 6]) -&amp;gt; 4 findElements([0, 1, 2, 3, 4, 5]) -&amp;gt; -1 // you have a String array, for example {Petya, Kolya, Olya, Katya}. Write a method that will ask the user what is his name, if this name is in the array, then the method print: “Hello, name!</description></item><item><title/><link>https://andron13.de/school/java/exercises/solution/03-java-exercises-solution-string-01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/exercises/solution/03-java-exercises-solution-string-01/</guid><description/></item><item><title/><link>https://andron13.de/school/java/exercises/solution/04-java-exercises-solution-string-02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/exercises/solution/04-java-exercises-solution-string-02/</guid><description/></item><item><title/><link>https://andron13.de/school/java/exercises/solution/05-java-exercises-solution-string-03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/exercises/solution/05-java-exercises-solution-string-03/</guid><description>Добрый вечер, String - трес. Решение # public class StringTresExercise { public static void main(String[] args) { System.out.println(countYZ(&amp;quot;fez day&amp;quot;)); // exp.2 System.out.println(countYZ(&amp;quot;day fez&amp;quot;)); // exp.2 System.out.println(countYZ(&amp;quot;day fyyyz&amp;quot;)); // exp.2 System.out.println(countYZ(&amp;quot;tel ran&amp;quot;)); // exp. 0 System.out.println(countYZ(&amp;quot;xyx,xzy&amp;quot;)); // exp. 1 System.out.println(countYZ(&amp;quot;London is the capital of Great Britain&amp;quot;)); // exp. 0 System.out.println(gHappy(&amp;quot;xxggxx&amp;quot;)); // exp. true System.out.println(gHappy(&amp;quot;xxgxx&amp;quot;)); // exp. false System.out.println(gHappy(&amp;quot;xxggyygxx&amp;quot;)); // exp. false } private static int countYZ(String s) { int wordsNumber = 0; for (int i = 1; i &amp;lt; s.</description></item><item><title/><link>https://andron13.de/school/java/exercises/solution/21-java-eugen/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/exercises/solution/21-java-eugen/</guid><description>Задачи от Жени # Given a String with different braces, check if the order of braces is correct. Every next brace can be an opening brace or should close a previous opening brace. Given a long, check if it is a palindrom Given a string with capital letters, small letters and symbols, return a string with capital letters turned into small, ans small into capital. Symbols remain unchanged. public class Palindrom { // given a long, check if it is a palindrom public static void main(String[] args) { System.</description></item><item><title/><link>https://andron13.de/school/java/oop-course/006-java-oop-practical-arrays/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/oop-course/006-java-oop-practical-arrays/</guid><description>Naming a Package и массивы объектов # Практическая реализация пройденного материала
Огромное количество теоретического материала с теоретическими примерами плохо усваиваемы.
Давайте попробуем это исправить.
Я создам новый проект:
project . +-- src | +-- de | +-- andron13 | +-- application | +-- LibraryApp.java | +-- dao | +-- Library.java | +-- data | +-- Book.java +-- .gitignore +-- readme.md В файл readme.md обычно пишут о чём проект, как его запустить и кто его делал.</description></item><item><title/><link>https://andron13.de/school/java/oop-course/007-java-oop-abstraction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/oop-course/007-java-oop-abstraction/</guid><description>Абстрактные классы и методы в Java # Иногда наши родственные объекты, которые наследованы от одного базового класса имеют разный подход к реализации методов. И часто во всех дочерних классах метод нужно переопределить.
Одна из парадигм ООП - схожее объединять. И эта парадигма может объединить и разные методы. Пример разных методов есть у домашних животных. Лошадка скачет, собачка бежит, птичка летит, рыбка плывёт. Метод движения нам нужен, потому что мы должны прописать передачу целевых координат и задать движение объекту.</description></item><item><title/><link>https://andron13.de/school/java/oop-course/008-java-oop-association-aggregation-composition/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/oop-course/008-java-oop-association-aggregation-composition/</guid><description>Association, Aggregation and Composition # В ООП(не только в Java) помимо наследования различают ещё три связи между объектами:
Ассоциация Агрегация Композиция Наследование Агрегация - Aggregation # Мы говорим об агрегации, когда объект может быть частью нескольких составных объектов(компонентов). В этом случае полученный объект агрегирован. Срок службы деталей может быть больше, чем срок службы агрегата.
Примером агрегации являются взаимоотношения между футбольной командой и ее игроками. Человек может играть в нескольких командах, и если команда распущена, обычно это не означает конец для ее бывших игроков.</description></item><item><title/><link>https://andron13.de/school/java/oop-course/009-java-oop-interface/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/oop-course/009-java-oop-interface/</guid><description>https://javarush.ru/groups/posts/1981-dlja-chego-v-java-nuzhnih-interfeysih</description></item><item><title/><link>https://andron13.de/school/java/oop-course/010-java-oop-practical-number-and-fraction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/oop-course/010-java-oop-practical-number-and-fraction/</guid><description>public class Fraction { private int numerator; private int denominator; Fraction(int numerator) { this.numerator = numerator; this.denominator = 1; } public Fraction(int numerator, int denominator) { this.numerator = numerator; this.denominator = denominator; } public int getNumerator() { return numerator; } public int getDenominator() { return denominator; } public Fraction sum(Fraction fraction) { Fraction result = sum(fraction, this); return result; } public static Fraction sum(Fraction a, Fraction b) { // описать сложение; // выполнить сокращение дробей, если это возможно // находим нок знаменателей дробей // подставить полученное значение в знаменатель РЕЗУЛЬТАТА // Разделить нок на знаменатели данных дробей.</description></item><item><title/><link>https://andron13.de/school/java/oop-course/011-java-oop-enum/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/oop-course/011-java-oop-enum/</guid><description>enum Level { LOW, MEDIUM, HIGH } Level myVar = Level.MEDIUM; enum Level { LOW, MEDIUM, HIGH } public class MyClass { public static void main(String[] args) { Level myVar = Level.MEDIUM; switch(myVar) { case LOW: System.out.println(&amp;#34;Low level&amp;#34;); break; case MEDIUM: System.out.println(&amp;#34;Medium level&amp;#34;); break; case HIGH: System.out.println(&amp;#34;High level&amp;#34;); break; } } } https://mkyong.com/java/java-enum-example/ https://www.w3schools.com/java/java_enums.asp https://javarush.ru/groups/posts/1963-kak-ispoljhzovatjh-klass-enum
public enum Gender { M(1), W(2), D(3); private int gend; private Gender(int gend) { this.gend = gend; } public int getGend() { return gend; } } https://javarush.</description></item><item><title/><link>https://andron13.de/school/java/oop-course/012-java-oop-date/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/oop-course/012-java-oop-date/</guid><description>Дата и время в Java # Прежде чем
Java и время: Пре
Date today = new Date(); System.out.println(today); Date dateStart = new Date(0); System.out.println(&amp;#34;dateStart &amp;#34; + dateStart); Date anotherDay = new Date(1_451_665_447_567L); System.out.println(&amp;#34;just anotherDay &amp;#34; + anotherDay); Date theEnd = new Date(Long.MAX_VALUE); System.out.println(theEnd); В итоге у нас получился вот такой вот класс, в котором мы поработали с некоторыми вариантами даты в Java.
import java.text.*; import java.time.*; import java.time.format.DateTimeFormatter; import java.</description></item><item><title/><link>https://andron13.de/school/java/oop-course/013-java-practical-hashcode-equals-tostring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/oop-course/013-java-practical-hashcode-equals-tostring/</guid><description/></item><item><title/><link>https://andron13.de/school/java/oop-course/014-java-oop-mutable-immutable-objects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/oop-course/014-java-oop-mutable-immutable-objects/</guid><description>Mutable vs Immutable Objects https://www.interviewcake.com/concept/java/mutable</description></item><item><title/><link>https://andron13.de/school/java/oop-course/015-java-oop-arraylist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/oop-course/015-java-oop-arraylist/</guid><description>Java ArrayList - основы # При использовании массивов можно было заметить, что у них есть один минус - они конечны. Мы не можем расширить массив. При незапланированном увеличении элементов массива мы вынуждены создавать новый массив, так как массив не меняет своей длины.
Java предоставляет ArrayList, который решает эту и часть других ограничений обычного массива. Не надо считать эти ограничения массива его недостатками. Это просто особенности, которые надо учитывать.
На примере ниже можно посмотреть различия между способами хранения информации.</description></item><item><title/><link>https://andron13.de/school/java/oop-course/035-java-formatter-systemoutprintf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/oop-course/035-java-formatter-systemoutprintf/</guid><description>https://www.youtube.com/watch?v=IVcagooE5y4&amp;amp;list=PL71C6DFDDF73835C2&amp;amp;index=18</description></item><item><title/><link>https://andron13.de/school/java/oop-course/037-java-object-chapter-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/oop-course/037-java-object-chapter-2/</guid><description>А запомнить нам поможет, то, что String тоже пишется с большой буквы, но как исключение из всех объектов инициализируется по упрощённой формуле. Вернее может, а может и по новой:
String helloWorld = new String(&amp;#34;Hello Java World!&amp;#34;) https://www.baeldung.com/java-string-pool
/**
BC12-Morning
16 18 : 25 */ public class Test { public static void main(String[] args) { String a = &amp;ldquo;Андрей&amp;rdquo;; String b = new String(&amp;ldquo;Андрей&amp;rdquo;); String e = new String(&amp;ldquo;Андрей&amp;rdquo;); String newE = e; boolean c = a.</description></item><item><title/><link>https://andron13.de/school/java/oop-course/038-java-object-chapter-3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/oop-course/038-java-object-chapter-3/</guid><description>Три ноги на которых стоит Java # Наследование - inheritance. https://vertex-academy.com/tutorials/ru/pravila-nasledovaniya-v-java/ Инкапсуляция - encapsulation. Полиморфизм - polymorphism. перегрузка - overloading. overriding Инкапсуляция — ограничение доступа к составляющим объект компонентам (методам и переменным).
public class Person { private String name; private String firstName; public int age; public Person(String ln, String fn) { name = ln; firstName = fn; } public Person() { this(&amp;#34;Doe&amp;#34;, &amp;#34;John&amp;#34;); } public void setName(String ln, String fn) { name = ln; firstName = fn; } public String fullName() { return (name + &amp;#34; &amp;#34; + firstName); } } import java.</description></item><item><title/><link>https://andron13.de/school/java/oop-course/040-java-uml-diagram/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/oop-course/040-java-uml-diagram/</guid><description>https://www.youtube.com/watch?v=ksvwF2sUjHM&amp;amp;list=PLBlnK6fEyqRjKA_NuK9mHmlk0dZzuP1P5&amp;amp;index=120</description></item><item><title/><link>https://andron13.de/school/java/oop-course/042-java-maven/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/oop-course/042-java-maven/</guid><description>Java и Apache Maven — фреймворк для автоматизации сборки проектов # В предыдущем уроке мы собрали свою библиотеку и говорили о сборке своего собственного приложения. Хотя ни одного приложения ещё и не сделали.
Представьте, что мы до сих пор собирали телескоп, что бы посмотреть на звёзды. И вот собрав его мы теперь можем изучать планеты, звёзды, луну, солнце. С чего начать?
Примерно перед таким же выбором стою и я. Вы выучили основы и вам можно рассказывать всё.</description></item><item><title/><link>https://andron13.de/school/java/oop-course/043-java-gradle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/oop-course/043-java-gradle/</guid><description>Gradle - сборщик для Android &amp;amp; C # Мир программирования это мир конкуренции. Вопрос, почему придумали Gradle отвечается сам собой. Потому что програмисты тоже человеки. А человеки всегда находятся в поиске. И даже улучшение работы на пару процентов уже для многих может иметь решающее значение.
Gradle подходит к решению некоторых задач по другому чем Maven и активно используется многими фреймворками так же как и Maven на ваш выбор или даже безальтернативно - только Gradle.</description></item><item><title/><link>https://andron13.de/school/java/oop-course/044-java-testing-junit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/oop-course/044-java-testing-junit/</guid><description>JUnit - тестировние приложений в Java # В начале перед первым уроком я стоял перед выбором какую из &amp;ldquo;страшных&amp;rdquo; технологий, дать в самом начале и не говорить что они страшные. В итоге я решил, что Git та технология, которая даётся сложнее всего и в каждом уроке стоит немного уделять ему внимания. Потому что без написания код нельзя выучить методы работы с Git.
Однако существует ещё одна технология, которая невозможна сама по себе, она требует уже написанного кода.</description></item><item><title/><link>https://andron13.de/school/java/spring/001-java-spring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/spring/001-java-spring/</guid><description>https://www.youtube.com/watch?v=5ePo08sqcpk&amp;amp;list=PLAma_mKffTOR5o0WNHnY0mTjKxnCgSXrZ</description></item><item><title/><link>https://andron13.de/school/tools/01-git/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/tools/01-git/</guid><description>Git # Не буду скрывать, Git это та технология, которая не так легко даётся.
Принципиально, написано достаточно книг, которые всё объясняют намного лучше, чем я когда либо смогу. Именно по этому я написал просто короткую инструкцию для начинающих , где описаны основные приказы, которые тебе понадобятся первое время.
Единственное, что я бы хотел добавить к книгам, которые вам всё равно обязательно надо прочитать, всего несколько предложений.
Git - это система контроля версий в разработке.</description></item><item><title/><link>https://andron13.de/school/tools/02-github-basic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/tools/02-github-basic/</guid><description>Методичка по работе с Git # Терминология # Термин Ссылка Пояснение Git https://git-scm.com/downloads Git - это очень популярная технология контроля версий, используемая при разработке програмного обеспечения и веб-приложений. Онлайн инструкция на русском языке - https://git-scm.com/book/ru/v2/ Github https://github.com/ Популярный сервис для хранения Git-репозиториев. С 2018 года принадлежит Microsoft Bitbucket https://bitbucket.org/ Популярный сервис для хранения Git-репозиториев. Принадлежит Atlassian и очень тесно интегрирован с популярными IT-приложениями этой фирмы как Trello или Jira Gitlab https://gitlab.</description></item><item><title/><link>https://andron13.de/school/tools/03-boolean-algebra/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/tools/03-boolean-algebra/</guid><description>Булева алгебра # Булева алгебра, ударение на первый слог. БУлева.
Программисты учат её в институте. Люди, которые не учились в институте должны будут понять её самостоятельно.
При этом всё не так уж и сложно.
Давайте я попробую на пальцах рассказать основы и то, что нам понадобится на минимальном уровне.
Дизъюнкция # Когда мама ИЛИ папа дают мне деньги на карманные расходы, то я бегу и покупаю себе мороженное.</description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>andron13</title><link>https://andron13.de/school/java/basic-course/</link><description>Recent content on andron13</description><generator>Hugo -- gohugo.io</generator><language>ru</language><atom:link href="https://andron13.de/school/java/basic-course/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://andron13.de/school/java/basic-course/001-java-setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/001-java-setup/</guid><description>HelloWorld.java — первая программа на Java — введение в Java 001 # Установка JDK # В интернете существуют тысячи инструкций по установке окружения для работы в Java.
Я уверен, что вы сможете вбить в Google запрос на английском: &amp;ldquo;How to Install Java Development Kit&amp;rdquo; или на русском: &amp;ldquo;Установка JDK&amp;rdquo;. Java принадлежит фирме Oracle и можно сразу скачать Java с её страниц, скачав просто JDK, скачав Netbeans вместе с JDK или скачав открытую AdoptOpenJDK (предпочтительнее для новичков).</description></item><item><title/><link>https://andron13.de/school/java/basic-course/002-java-integers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/002-java-integers/</guid><description>Простые типы данных — byte, short, int, long, в примерах — введение в Java 002 # Чтобы вызвать на экран что-то большее, чем &amp;ldquo;Привет, Мир!&amp;rdquo;, надо работать с числами, символами и буквами. Чтобы работать с ними в Java — надо научиться их хранить и передавать. Для этого нам надо познакомиться с понятием &amp;ldquo;типы данных&amp;rdquo;, а точнее &amp;ldquo;простые типы данных&amp;rdquo;.
Простые типы данных — Java Primitives # Существуют следующие базовые типы данных: byte, short, int, long, float, double, char, boolean и String (не совсем примитив, но базовый тип данных).</description></item><item><title/><link>https://andron13.de/school/java/basic-course/003-java-float-double/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/003-java-float-double/</guid><description>Типы данных с плавающей точкой: float и double — введение в Java 003 # Числа с плавающей точкой # Для хранения дробных чисел в Java используют float и double. Правильное название — простые (примитивные) типы данных с плавающей точкой. Примитивные типы данных — byte, short, int, long, которые являются целыми числами, — мы рассматривали - здесь.
число Пи Float # Давайте сразу рассмотрим практический пример:</description></item><item><title/><link>https://andron13.de/school/java/basic-course/004-java-char-string/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/004-java-char-string/</guid><description>Типы данных char и String: примеры применения — введение в Java 004 # Char # Таблица символов Если в программе нужны символы, то для этого мы пользуемся типом данных char. Например:
public class HelloChar { public static void main(String[] args) { char zahl = 100; // Сотый по счёту символ в таблице char octal = &amp;#39;\u039A&amp;#39;; // Вызов определённого символа кодом char zeichen = &amp;#39;A&amp;#39;; // Буква A char tabulator = &amp;#39;\t&amp;#39;; // В русском языке клавиша называется &amp;#34;Таб&amp;#34; // Табулятор char phi = &amp;#39;\u03A6&amp;#39;; // Греческая буквая Фита - PHI System.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/005-java-boolean/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/005-java-boolean/</guid><description>Тип данных boolean и логические операторы — введение в Java 005 # Правда или ложь Boolean # Boolean в Java — это логический тип данных. Переменная типа boolean может принимать всего два значения — это правда или ложь — true &amp;amp; false. Эти два значения обозначаются в других языках и часто выдаются на экран как 1 и 0, но всё же не равны этим значениям: например, выражение boolean b = 0; приведёт к ошибке при компиляции программы.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/006-java-switch-case/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/006-java-switch-case/</guid><description>Switch и Case: оператор выбора — введение в Java 006 # В этом уроке мы рассмотрим на примерах оператор выбора Switch и опции выбора Case.
Пример:
За пятёрку в четверти по математике папа обещал мне велосипед. За четвёрку в четверти по математике мама купит мне GoPro4. За тройку меня, наверное, не будут ругать. За двойку меня отругают. За единицу меня &amp;ldquo;убьют&amp;rdquo;. Опять двойка Типичный жизненный пример, который можно написать на Java:</description></item><item><title/><link>https://andron13.de/school/java/basic-course/007-java-if-else/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/007-java-if-else/</guid><description>Условный оператор if, if-else — 6введение в Java 007 # если, то В прошлом уроке я рассматривал оператор выбора Switch. Оператор IF имеет схожие функции и примерно те же цели. Основные отличия — в используемых условиях. Кстати, как обычно, верить мне необязательно: можно спросить у Google, например &amp;ldquo;java switch vs if сравнение&amp;rdquo;. Только на Хабре я нашёл несколько статей, рассматривающих эстетическую сторону вопроса, вопрос скорости, эффективности и вопрос используемых методов.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/008-java-modulo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/008-java-modulo/</guid><description>Modulo — модуль деления, введение в Java 008 # Modulo — в специализированной литературе &amp;ldquo;modulo&amp;rdquo; называется оператором деления по модулю или взятием модуля деления. В Java обозначается знаком &amp;ldquo;процентов&amp;rdquo; - %.
Используется это в программировании, например для перевода десятичных чисел в двоичные. Не надо путать этот оператор с делением &amp;ldquo;/&amp;rdquo;. Замечу, что в Википедии на данный момент по запросу modulo выводится статья про &amp;ldquo;деление с остатком&amp;rdquo; . На мой взгляд это очень сильно дезориентирующие определение.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/009-java-arithmetic-operators/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/009-java-arithmetic-operators/</guid><description>Операторы в Java — введение в Java 009 # Мы уже использовали многое в наших программах не задумываясь. Например знаками знакомыми нам из школьной математики: +, -, = и др.. Пришло время узнать весь список доступных в Java операторов и применение.
Заранее скажу, что для введения в Java достаточно понимать первые две таблицы - арифметические операторы и операторы сравнения.
Арифметические операторы - arithmetic operators # Оператор Пример использования Пояснение + a + b Сложение - a - b Вычитание (также унарный минус) * a * b Умножение / a / b Деление % a % b Деление по модулю ++ Инкремент, а++ соотвествует а = а + 1 &amp;ndash; Декремент, а&amp;ndash; соотвествует а = а - 1 += a += b Сложение с присваиванием Выражение a += b эквивалентно значению a = a + b.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/010-java-for/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/010-java-for/</guid><description>Цикл FOR — введение в Java 010 # петля Каждый день я встаю в шесть утра и иду на завод к восьми, в семь вечера я уже снова дома, смотрю кино по телевизору, курю с соседом на лестничной клетке и в одиннадцать уже иду спать. Утром вторника повторяется всё то же самое, и в среду, и в четверг, и в пятницу.
Всё это можно описать, например, с помощью блока if else.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/011-java-methods-void-return/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/011-java-methods-void-return/</guid><description>Методы в Java немного подробнее: возвратные и исполняющие-введение в Java 011 # Главный метод класса # public static void main(String[] args) Каждый раз пишем эту магическую строку что бы запустить нашу программу. MAIN - обозначает точку входа в программу. Мы можем один раз написать этот метод в главном классе, например Main:
public class Main { public static void main(String[] args) { // просто тестирование } } Следующим методом мы можем написать метод сложения двух целых чисел.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/012-java-while-dowhile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/012-java-while-dowhile/</guid><description>Цикл While и Do While # Это самая лёгкая глава. Потому что цикл while — родной брат цикла for.
Пример:
public class WhileWeAreYoung { public static void main(String[] args){ int i = 0; while(i &amp;lt; 10){ System.out.println(i); i++; } } } Изученный цикл for мы бы написали так:
public static void main(String[] args) { for (int i = 0; i &amp;lt; 10 ; i++){ System.out.println(i); } } В цикле for стоит условие, и в while стоит условие.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/013-java-scanner/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/013-java-scanner/</guid><description>Scanner # Я хочу ввести немного магии в наши программы. Мы уже пользовались и пользуемся для вывода результатов командой System.out.println(). Возможность ввода данных через терминал в программу также существует.
import java.util.Scanner; public class WhileScanner { public static void main(String[] args) { Scanner input = new Scanner(System.in); int old; System.out.println(&amp;#34;Сколько тебе лет? &amp;#34;); old = input.nextInt(); if (old &amp;gt;= 18){ System.out.println(&amp;#34;Ты можешь купить на вечер что-то более крепкое, чем чай&amp;#34;); break; // выход из цикла } } } Удачное ли использование цикла while в примере выше?</description></item><item><title/><link>https://andron13.de/school/java/basic-course/014-java-binary-and-decimal-issue/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/014-java-binary-and-decimal-issue/</guid><description>Двоичная, десятичная, восьмеричная и прочие системы в Java и преобразования между ними. # символы майя Для усвоения этого урока достаточно знать циклы for (while, do-while), оператор выбора switch, условный оператор **if **, знание и уверенное пользование арифметическим оператором modulo.
Это один из лучших примеров, который показывает, что первоначально абсолютно неподъёмная задача при решении оказывается не такой уж и страшной.
Мы уже рассматривали во главе, которая знакомила нас с while как из десятичных чисел получить двоичные.</description></item></channel></rss>
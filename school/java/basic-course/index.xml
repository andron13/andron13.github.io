<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>01 - Базовый курс Java on andron13</title><link>https://andron13.de/school/java/basic-course/</link><description>Recent content in 01 - Базовый курс Java on andron13</description><generator>Hugo -- gohugo.io</generator><language>ru</language><atom:link href="https://andron13.de/school/java/basic-course/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://andron13.de/school/java/basic-course/006-java-switch-case/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/006-java-switch-case/</guid><description>Switch и Case: оператор выбора — введение в Java 006 # В этом уроке мы рассмотрим на примерах оператор выбора Switch и опции выбора Case.
Пример:
За пятёрку в четверти по математике папа обещал мне велосипед. За четвёрку в четверти по математике мама купит мне GoPro4. За тройку меня, наверное, не будут ругать. За двойку меня отругают. За единицу меня &amp;ldquo;убьют&amp;rdquo;. Опять двойка Типичный жизненный пример, который можно написать на Java:</description></item><item><title/><link>https://andron13.de/school/java/basic-course/007-java-if-else/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/007-java-if-else/</guid><description>Условный оператор if, if-else — введение в Java 007 # если, то В прошлом уроке я рассматривал оператор выбора Switch. Оператор IF имеет схожие функции и примерно те же цели. Основные отличия — в используемых условиях. Кстати, как обычно, верить мне необязательно: можно спросить у Google, например &amp;ldquo;java switch vs if сравнение&amp;rdquo;. Только на Хабре я нашёл несколько статей, рассматривающих эстетическую сторону вопроса, вопрос скорости, эффективности и вопрос используемых методов.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/008-java-modulo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/008-java-modulo/</guid><description>Modulo — модуль деления, введение в Java 008 # Modulo — в специализированной литературе &amp;ldquo;modulo&amp;rdquo; называется оператором деления по модулю или взятием модуля деления. В Java обозначается знаком &amp;ldquo;процентов&amp;rdquo; - %.
Используется это в программировании, например для перевода десятичных чисел в двоичные. Не надо путать этот оператор с делением &amp;ldquo;/&amp;rdquo;. Замечу, что в Википедии на данный момент по запросу modulo выводится статья про &amp;ldquo;деление с остатком&amp;rdquo; . На мой взгляд это очень сильно дезориентирующие определение.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/009-java-arithmetic-operators/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/009-java-arithmetic-operators/</guid><description>Операторы в Java — введение в Java 009 # Мы уже использовали многое в наших программах не задумываясь. Например знаками знакомыми нам из школьной математики: +, -, = и др.. Пришло время узнать весь список доступных в Java операторов и применение.
Заранее скажу, что для введения в Java достаточно понимать первые две таблицы - арифметические операторы и операторы сравнения.
Арифметические операторы - arithmetic operators # Оператор Пример использования Пояснение + a + b Сложение - a - b Вычитание (также унарный минус) * a * b Умножение / a / b Деление % a % b Деление по модулю ++ a++ Инкремент, а++ соответствует а = а + 1 &amp;ndash; a&amp;ndash; Декремент, а&amp;ndash; соответствует а = а - 1 += a += b Сложение с присваиванием Выражение a += b эквивалентно значению a = a + b.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/010-java-for/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/010-java-for/</guid><description>Цикл FOR — введение в Java 010 # петля Каждый день я встаю в шесть утра и иду на завод к восьми, в семь вечера я уже снова дома, смотрю кино по телевизору, курю с соседом на лестничной клетке и в одиннадцать уже иду спать. Утром вторника повторяется всё то же самое, и в среду, и в четверг, и в пятницу.
Всё это можно описать, например, с помощью блока if else.</description></item><item><title>01 - Установка JDK</title><link>https://andron13.de/school/java/basic-course/001-java-setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/001-java-setup/</guid><description>HelloWorld.java — первая программа на Java — введение в Java 001 # Установка JDK # В интернете существуют тысячи инструкций по установке окружения для работы в Java.
Я уверен, что вы сможете вбить в Google запрос на английском: &amp;ldquo;How to Install Java Development Kit&amp;rdquo; или на русском: &amp;ldquo;Установка JDK&amp;rdquo;. Java принадлежит фирме Oracle и можно сразу скачать Java с её страниц, скачав просто JDK, скачав Netbeans вместе с JDK или скачав открытую AdoptOpenJDK (предпочтительнее для новичков).</description></item><item><title>05 -</title><link>https://andron13.de/school/java/basic-course/005-java-boolean/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/005-java-boolean/</guid><description>Тип данных boolean и логические операторы — введение в Java 005 # Правда или ложь Boolean # Boolean в Java — это логический тип данных. Переменная типа boolean может принимать всего два значения — это правда или ложь — true &amp;amp; false. Эти два значения обозначаются в других языках и часто выдаются на экран как 1 и 0, но всё же не равны этим значениям: например, выражение boolean b = 0; приведёт к ошибке при компиляции программы.</description></item><item><title>2</title><link>https://andron13.de/school/java/basic-course/002-java-integers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/002-java-integers/</guid><description>Простые типы данных — byte, short, int, long, в примерах — введение в Java 002 # Чтобы вызвать на экран что-то большее, чем &amp;ldquo;Привет, Мир!&amp;rdquo;, надо работать с числами, символами и буквами. Чтобы работать с ними в Java — надо научиться их хранить и передавать. Для этого нам надо познакомиться с понятием &amp;ldquo;типы данных&amp;rdquo;, а точнее &amp;ldquo;простые типы данных&amp;rdquo;.
Простые типы данных — Java Primitives # Существуют следующие базовые типы данных: byte, short, int, long, float, double, char, boolean и String (не совсем примитив, но базовый тип данных).</description></item><item><title>3</title><link>https://andron13.de/school/java/basic-course/003-java-float-double/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/003-java-float-double/</guid><description>Типы данных с плавающей точкой: float и double — введение в Java 003 # Числа с плавающей точкой # Для хранения дробных чисел в Java используют float и double. Правильное название — простые (примитивные) типы данных с плавающей точкой. Примитивные типы данных — byte, short, int, long, которые являются целыми числами, — мы рассматривали - здесь.
число Пи Float # Давайте сразу рассмотрим практический пример:</description></item><item><title>4</title><link>https://andron13.de/school/java/basic-course/004-java-char-string/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/004-java-char-string/</guid><description>Типы данных char и String: примеры применения — введение в Java 004 # Char # Таблица символов Если в программе нужны символы, то для этого мы пользуемся типом данных char. Например:
public class HelloChar { public static void main(String[] args) { char zahl = 100; // Сотый по счёту символ в таблице char octal = &amp;#39;\u039A&amp;#39;; // Вызов определённого символа кодом char zeichen = &amp;#39;A&amp;#39;; // Буква A char tabulator = &amp;#39;\t&amp;#39;; // В русском языке клавиша называется &amp;#34;Таб&amp;#34; // Табулятор char phi = &amp;#39;\u03A6&amp;#39;; // Греческая буквая Фита - PHI System.</description></item><item><title>StringBuffer, StringBuilder и String в чём отличие</title><link>https://andron13.de/school/java/basic-course/026-java-string-stringbuffer-stringbuilder/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/026-java-string-stringbuffer-stringbuilder/</guid><description>#String, StringBuffer и StringBuilder — введение в Java 026
(В разработке)
Нас уже не должны пугать ключевые слова с большой буквы. Нам известны как минимум два из них String и Scanner. StringBuffer и StringBuilder родные братья уже давно изученного типа данных String.
Чем был плох String? # String всем прекрасен, только он неизменяем (immutable). И операции со строковыми величинами иногда дороги в потреблении ресурсов. Например, если мы в цикле изменяем строку добавляя к ней символы.</description></item><item><title>Настройка, горячие клавиши, debugging в IntelliJ IDEA</title><link>https://andron13.de/school/java/basic-course/025-java-idea-basics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/025-java-idea-basics/</guid><description>IntelliJ IDEA — настройка, горячие клавиши, debugging — введение в Java 025 # (В разработке)
Сегодняшний программист очень сильно отличается от программиста 90-х.
Блокноты сменились мощными инструментами, которые подсказывают нам даже эффективные методы решения. Порой, кажется, что ещё чуть-чуть и людям точно не надо будет учить программирование, потому что Idea сделает всё сама.
Но пока этого не случилось нам стоит потратить немного времени на настройку самого главного инструмента, в котором мы пишем код.</description></item><item><title>Обмен значений переменных в Java</title><link>https://andron13.de/school/java/basic-course/024-java-swap-two-variables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/024-java-swap-two-variables/</guid><description>Обмен значений переменных — введение в Java 024 # Допустим у нас есть переменная A со значением 5 и переменная B со значением 3. И нам нужно поменять значения у переменных местами.
int a = 5; int b = 7; int temp = a; a = b; b = temp; Мы создаём дополнительную переменную. Передаём ей временно для хранения значение A, в само A передаём значение B. В B присваиваем значение, которое у нас хранится во временной переменной.</description></item><item><title>Пузырьковая сортировка — Bubble Sort. Алгоритмы сортировок.</title><link>https://andron13.de/school/java/basic-course/027-java-sorting-algorithms-01-bubblesort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/027-java-sorting-algorithms-01-bubblesort/</guid><description>Алгоритмы сортировок, Bubble Sort — введение в Java 027 # массив требующий сортировки Представьте себе ситуацию, что вы просите свой компьютер отсортировать фотографии по размеру или занимаемому месту, товары на странице магазина по цене и новости на сайте по дате написания.
Все эти данные, массивы информации сортируются. Сейчас мы попробуем написать простейший алгоритм сортировки массива состоящего из чисел.
Пузырьковая сортировка # В пузырьковой сортировке мы по очереди просматриваем попарно весь массив.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/011-java-string-possibilities-and-more/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/011-java-string-possibilities-and-more/</guid><description>Возможности различных типов данных, литералов в Java — введение в Java 011 # В четвёртом уроке мы затронули преобразования одних типов данных в другие. Давайте для начала посмотрим, что именно мы тогда учили.
Явные и неявные преобразования # Значения, передаваемые переменным, можно привести в тот тип данных, которые переменная может принять. Вручную или автоматически, или явно и неявно.
преобразование типов данных Расширение типа (widening Casting), которое можно проследить на схеме с помощью стрелок, происходит автоматически.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/012-java-methods-void-return/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/012-java-methods-void-return/</guid><description>Методы в Java немного подробнее: возвратные и исполняющие — введение в Java 012 # Главный метод класса # public static void main(String[] args) Каждый раз пишем эту магическую строку что бы запустить нашу программу. MAIN - обозначает точку входа в программу. Мы можем один раз написать этот метод в главном классе, например Main:
public class Main { public static void main(String[] args) { // просто тестирование } } Следующим методом мы можем написать метод сложения двух целых чисел.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/013-java-while-dowhile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/013-java-while-dowhile/</guid><description>Цикл While и Do While — введение в Java 013 # Это самая лёгкая глава. Потому что цикл while — родной брат цикла for.
Пример:
public class WhileWeAreYoung { public static void main(String[] args){ int i = 0; while(i &amp;lt; 10){ System.out.println(i); i++; } } } Изученный цикл for мы бы написали так:
public static void main(String[] args) { for (int i = 0; i &amp;lt; 10 ; i++){ System.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/014-java-scanner/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/014-java-scanner/</guid><description>Scanner — введение в Java 014 # Я хочу ввести немного магии в наши программы. Мы уже пользовались и пользуемся для вывода результатов командой System.out.println(). Возможность ввода данных через терминал в программу также существует.
import java.util.Scanner; public class WhileScanner { public static void main(String[] args) { Scanner input = new Scanner(System.in); int old; System.out.println(&amp;#34;Сколько тебе лет? &amp;#34;); old = input.nextInt(); while (old &amp;gt;= 18){ System.out.println(&amp;#34;Ты можешь купить на вечер что-то более крепкое, чем чай&amp;#34;); break; // выход из цикла } } } Удачное ли использование цикла while в примере выше?</description></item><item><title/><link>https://andron13.de/school/java/basic-course/015-java-binary-and-decimal-issue/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/015-java-binary-and-decimal-issue/</guid><description>Двоичная, десятичная, восьмеричная и прочие системы в Java и преобразования между ними — введение в Java 015 # символы майя Для усвоения этого урока достаточно знать циклы for (while, do-while), оператор выбора switch, условный оператор **if **, знание и уверенное пользование арифметическим оператором modulo.
Это один из лучших примеров, который показывает, что первоначально абсолютно неподъёмная задача при решении оказывается не такой уж и страшной.
Мы уже рассматривали во главе, которая знакомила нас с while как из десятичных чисел получить двоичные.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/016-java-ternary-operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/016-java-ternary-operator/</guid><description>Тернарный оператор &amp;ldquo;?:&amp;rdquo; — введение в Java 016 # Выражение:
if (условие) { number = 10; } else { number = -10; } Можно заменить на
number = (условие) ? 10 : -10; То есть ?: укороченный условный оператор if, if-else из седьмого урока
переменная = (выражение) ? значение if true : значение if false public static void ternar(int schoolАttestat){ String resultAtHome = &amp;quot;&amp;quot;; resultAtHome = (schoolАttestat &amp;gt;= 3) ?</description></item><item><title/><link>https://andron13.de/school/java/basic-course/017-java-recursion-intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/017-java-recursion-intro/</guid><description>Рекурсивные методы в Java — введение в Java 017 # рекурсия экрана Многие из нас пытались сфотографировать себя в зеркале так, что бы в зеркале было снова изображение фотографирующего в зеркале и так до бесконечности. Это и есть частный случай рекурсии. В программировании это - метод, вызывающий(повторяющий) сам себя.
Рекурсия в программировании # Давайте попробуем найти факториал числа
public class Factorial{ static int calculateFactorial(int n){ int result = 1; for (int i = 1; i &amp;lt;=n; i ++){ result = result*i; } return result; } public static void main(String[] args){ System.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/018-java-array/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/018-java-array/</guid><description>Массивы в Java — введение в Java 018 # Давайте представим себе книжную полку на которой стоит множество книг. Или камеру хранения на вокзале со множеством ячеек. У каждой ячейки есть номер и в каждой из них может находиться чемодан.
Массив в реальной жизни - камера хранения В Java тоже есть похожие &amp;ldquo;книжные полки&amp;rdquo; или &amp;ldquo;камеры хранения&amp;rdquo;. Называются они массивами и в массиве мы можем хранить множество переменных одного типа.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/019-java-foreach/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/019-java-foreach/</guid><description>For-Each Loop — введение в Java 019 # Мы изучали цикл for, где в определённом диапазоне мы перебирали элементы. Существует брат уже изученного цикла - for each (фор ич). For each позволяет манипулировать со всеми элементами массива. Например
public class Main { public static void main(String[] args) { arrayTryandCry((int) (Math.random() * 100)); } static void arrayTryAndCry(int arrayLength) { int[] myArray = new int[arrayLength]; for (int element : myArray) { element = element + (int) (Math.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/020-java-varargs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/020-java-varargs/</guid><description>Variable arguments - Varargs — введение в Java 020 # Давайте сложим два числа:
public class Main { public static void main(String[] args) { sum(2, 3); } private static int sum(int a, int b) { return a + b; } } Удобно находить сумму, но не очень. Ведь если надо найти сумму трёх чисел, надо писать другой метод:
public class Main { public static void main(String[] args) { sum(2, 3, 5); } private static int sum(int a, int b, int c) { return a + b + c; } } А если надо найти сумму трёх чисел?</description></item><item><title/><link>https://andron13.de/school/java/basic-course/021-java-multi-dimensional-array/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/021-java-multi-dimensional-array/</guid><description>Многомерные массивы в Java — введение в Java 021 # Давайте повторим, что такое массив
Массив # Массив — это совокупность однотипных переменных, для обращения к которым используется общее имя. Java допускает создание массивов любого типа, которые могут иметь одно или несколько измерений.
многомерный массив на примере февраля static void month() { int[][] monthCalendar; monthCalendar = new int[4][7]; for (int outer = 0; outer &amp;lt; monthCalendar.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/022-java-public-static-void-main/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/022-java-public-static-void-main/</guid><description>Что же это такое — public static void main(String[] args) — введение в Java 022 # Давайте попробуем приподнять завесу тайны с метода, который мы писали чаще всего. Надо всё-таки понимать хоть немного, то что мы пишем.
Мы уже знаем, что такое main - точка входа в нашу программу. Мы знаем что такое void - это просто метод который выполняет код. Пришло время понять, что мы знаем, что String[] args это просто переменная args, которая является строковым массивом.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/023-java-return-break-continue/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/023-java-return-break-continue/</guid><description>Операторы перехода break, continue, return — введение в Java 023 # Оператор break # пример работы оператора break С оператором break мы познакомились в шестом уроке во время знакомства с оператором выбора Switch. С помощью break мы выходим из вариантов выбора.
Прерывание цикла # С помощью break можно выходить из цикла.
public static void searchFor () { for (int i = 0; i &amp;lt;= 20; i++) { if (i == 4) { break; // выйти из цикла при i равной 4.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/028-java-sorting-algorithms-02-coctail-and-comb-sort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/028-java-sorting-algorithms-02-coctail-and-comb-sort/</guid><description>Сортировка расчёской(Combsort) и сортировка перемешиванием(Cocktail sort) — введение в Java 028 # Обе сортировки базируются на пузырьковой сортировке и вносят в неё некоторые улучшения. По этому мы их и рассмотрим вместе. Давайте начнём с коктейльной сортировки.
Сортировка перемешиванием(Cocktail sort) # Cocktail sort Cocktail sort - шейкерная сортировка, двунаправленная, коктейльная, сортировка перемешиванием.
В пузырьковой сортировке мы проходимся раз за разом, от начала массива до его конца и проверяем попарные элементы и если надо меняем их местами.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/029-java-sorting-algorithms-03-insertionsort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/029-java-sorting-algorithms-03-insertionsort/</guid><description>Сортировка вставками - Insertion Sort — введение в Java 029 # (В разработке)
Сортировка вставками - делит условно массив на две части. В левой собирается отсортированная часть, а из правой части берутся элементы и по очереди ставятся на своё место. Пожалуй, это самый близкий метод сортировки к обычному человеческому мышлению. Берём по одному и ставим на своё место.
for j = 2 to A.length do key = A[j] i = j-1 while (i &amp;gt; 0 and A[i] &amp;gt; key) do A[i + 1] = A[i] i = i - 1 end while A[i+1] = key end for https://www.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/030-java-sorting-algorithms-04-shuttlesort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/030-java-sorting-algorithms-04-shuttlesort/</guid><description>Челночная сортировка (Shuttle Sort) — введение в Java 030 # (В разработке)
public class Shuttle { public static int[] shuttleSort(int[] array) { for (int i = 0; i &amp;lt; array.length - 1; i++) { // primary pass if (array[i] &amp;gt; array[i + 1]) { int j = i - 1; int temp = array[i + 1]; // small value to move back array[i + 1] = array[i]; while (j &amp;gt;= 0 &amp;amp;&amp;amp; array[j] &amp;gt; temp) { // go back array[j + 1] = array[j]; // shuttle values forward j = j - 1; } // end secondary pass array[j + 1] = temp; // insert small value further back } // else no secondary pass } // end all passes return array; } }</description></item><item><title/><link>https://andron13.de/school/java/basic-course/031-java-sorting-algorithms-05-quicksort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/031-java-sorting-algorithms-05-quicksort/</guid><description>Быстрая сортировка, сортировка Хоара - quicksort — введение в Java 031 # (В разработке)
import java.util.Arrays; public class QuickSort { public static void quickSort(int[] array, int low, int high) { if (array.length == 0) return; //завершить выполнение, если длина массива равна 0 if (low &amp;gt;= high) return;//завершить выполнение если уже нечего делить // выбрать опорный элемент int middle = low + (high - low) / 2; int opora = array[middle]; // разделить на подмассивы, который больше и меньше опорного элемента int i = low, j = high; while (i &amp;lt;= j) { while (array[i] &amp;lt; opora) { i++; } while (array[j] &amp;gt; opora) { j--; } if (i &amp;lt;= j) {//меняем местами int temp = array[i]; array[i] = array[j]; array[j] = temp; i++; j--; } } // вызов рекурсии для сортировки левой и правой части if (low &amp;lt; j) quickSort(array, low, j); if (high &amp;gt; i) quickSort(array, i, high); } public static void main(String[] args) { int[] x = {8, 0, 4, 7, 3, 7, 10, 12, -3}; System.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/032-java-sorting-algorithms-big-o/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/032-java-sorting-algorithms-big-o/</guid><description>Оценка сложности алгоритмов, или Что такое О(log n) — введение в Java 032 # Существует множество способов сортировки данных.
Например:
Пузырьковая сортировка - Bubble Sort Сортировка перемешиванием, шейкерная сортировка, коктейльная сортировка Сортировка расчёской Сортировка выбором - Selection Sort Сортировка вставками - Insertion Sort Челночная сортировка - Shuttle Sort Сортировка Шелла - Shell sort Быстрая сортировка - quickSort Сортировка слиянием - merge sort Пирамидальная сортировка «Сортировка кучей» - Heapsort Сортировка подсчётом - Counting Sort Поразрядная сортировка - Radix Sort Первая часть этого списка перечисляет простые сортировки.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/033-java-binary-tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/033-java-binary-tree/</guid><description>Двоичное дерево — введение в Java 033 #</description></item><item><title/><link>https://andron13.de/school/java/basic-course/034-java-try-catch-finally/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/034-java-try-catch-finally/</guid><description>Exception — введение в Java 034 # Предположим, что пишем программу для кофеавтомата.
При выборе капучино, наш автомат собирает напиток из воды, кофе, молока. Мы же ему написали:
Возьми одну порцию воды Возьми одну порцию кофе Возьми порцию молока Сделай по рецепту кофе. Если одного из ингридиентов не будет, то автомат не сможет сделать кофе и возможно зависнет в ожидании ингредиентов или поломается и техник должен будет перезапускать его заново.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/035-java-creating-a-jar-file-/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/035-java-creating-a-jar-file-/</guid><description>JAR - Java Archive — введение в Java 035 # Приложения обычно делают, что бы они использовались. Java приложения обычно собираются в JAR-файл.
Думаю разумно уже сейчас узнать как собираются JAR приложения, потому что это совсем не сложно, ну и у JAR файлов есть один приятный бонус. Мы можем использовать их как собственную библиотеку.
Создание JAR # Давайте просто попробуем в IDEA создать наш JAR-файл.
Заходим в меню File -&amp;gt; Project Structure.</description></item><item><title/><link>https://andron13.de/school/java/basic-course/036-java-ressourcen/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/basic-course/036-java-ressourcen/</guid><description>Ресурсы и умение ими пользоваться — введение в Java 036 # Мы немного оторвёмся от самого кодинга и осмотримся по сторонам.
Яве исполнилось четверть века и за эти годы появилось множество статей, книг, рефератор, полезных и конечно же бесполезных ресурсов. И в этом хаосе мы попробуем найти островки логики и порядка.
Сайт Oracle - именно там лежит официальная документация к языку. Им надо научиться пользоваться и научиться читать документацию.</description></item></channel></rss>
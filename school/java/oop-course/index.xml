<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>02 - Введение в ООП on andron13</title><link>https://andron13.de/school/java/oop-course/</link><description>Recent content in 02 - Введение в ООП on andron13</description><generator>Hugo -- gohugo.io</generator><language>ru</language><lastBuildDate>Sun, 06 Sep 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://andron13.de/school/java/oop-course/index.xml" rel="self" type="application/rss+xml"/><item><title>Java-OOP 01 - Первые объекты</title><link>https://andron13.de/school/java/oop-course/001-java-object-introduction-chapter-1/</link><pubDate>Sun, 06 Sep 2020 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/oop-course/001-java-object-introduction-chapter-1/</guid><description>Первые объекты в Java - введение в Java-OOP 001 # Введение в объектно-ориентированное программирование(Object-Oriented Programming) продолжает курс - Басовый курс Java.
Java является объектно-ориентированным языком. Хотя на сегодня в ООП умеют играть все популярные языки. Это новшество на конец прошлого века, сегодня уже добавлено даже в старые языки, изначально не поддерживающие ООП (например php, javascript).
ООП очень важная тема. И всё что было до этого было просто разминкой перед настоящей Java.</description></item><item><title/><link>https://andron13.de/school/java/oop-course/002-java-oop-method-overloading-polymorphism/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/oop-course/002-java-oop-method-overloading-polymorphism/</guid><description>Перегрузка методов (Method Overloading) # В Java несколько методов из одного класса могут иметь одно название.
Одно название и несколько методов # Давайте сразу рассмотрим пример.
public class Calculator { public static int addition(int a, int b) { return a + b; } public static double addition(double a, double b) { return a + b; } } Очевидное-невероятное, но Java сама выбирает подходящий метод, для решения проблемы.Если мы передадим ей два int, то выберется первый метод, если два double, то JDK выберет самостоятельно нижний метод.</description></item><item><title/><link>https://andron13.de/school/java/oop-course/003-java-oop-constructor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/oop-course/003-java-oop-constructor/</guid><description>Конструктор в Java - введение в Java-OOP 001 # Стройка Создание объектов в Java часто сравнивает с обычной стройкой в жизни. И английский constructor и русский конструктор связаны со строительством напрямую.
Принципиально, конструктор это просто метод. Просто метод который создаёт объекты. В связи с тем, что это очень важный метод и является краеугольным камнем всей парадигмы ООП, то у этого метода есть привилегия.
Конструкторы (методы по которым создаются объекты) - пишутся в java всегда с большой буквы.</description></item><item><title/><link>https://andron13.de/school/java/oop-course/004-java-oop-inheritance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/oop-course/004-java-oop-inheritance/</guid><description/></item><item><title/><link>https://andron13.de/school/java/oop-course/005-java-oop-association-aggregation-composition/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/oop-course/005-java-oop-association-aggregation-composition/</guid><description>http://java-course.ru/begin/relations/ https://beginnersbook.com/2013/05/association/</description></item><item><title/><link>https://andron13.de/school/java/oop-course/006-java-oop-inheritance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/oop-course/006-java-oop-inheritance/</guid><description/></item><item><title/><link>https://andron13.de/school/java/oop-course/007-java-oop-encapsulation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/oop-course/007-java-oop-encapsulation/</guid><description/></item><item><title/><link>https://andron13.de/school/java/oop-course/010-java-oop-enum/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/oop-course/010-java-oop-enum/</guid><description>enum Level { LOW, MEDIUM, HIGH }
Level myVar = Level.MEDIUM; enum Level { LOW, MEDIUM, HIGH }
public class MyClass { public static void main(String[] args) { Level myVar = Level.MEDIUM;
switch(myVar) { case LOW: System.out.println(&amp;quot;Low level&amp;quot;); break; case MEDIUM: System.out.println(&amp;quot;Medium level&amp;quot;); break; case HIGH: System.out.println(&amp;quot;High level&amp;quot;); break; } } }
https://mkyong.com/java/java-enum-example/ https://www.w3schools.com/java/java_enums.asp https://javarush.ru/groups/posts/1963-kak-ispoljhzovatjh-klass-enum
public enum Gender { M(1), W(2), D(3);
private int gend; private Gender(int gend) { this.</description></item><item><title/><link>https://andron13.de/school/java/oop-course/012-java-formatter-systemoutprintf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/oop-course/012-java-formatter-systemoutprintf/</guid><description>https://www.youtube.com/watch?v=IVcagooE5y4&amp;amp;list=PL71C6DFDDF73835C2&amp;amp;index=18</description></item><item><title/><link>https://andron13.de/school/java/oop-course/037-java-object-chapter-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/oop-course/037-java-object-chapter-2/</guid><description>А запомнить нам поможет, то, что String тоже пишется с большой буквы, но как исключение из всех объектов инициализируется по упрощённой формуле. Вернее может, а может и по новой:
String helloWorld = new String(&amp;#34;Hello Java World!&amp;#34;) https://www.baeldung.com/java-string-pool
/**
BC12-Morning
16 18 : 25 */ public class Test { public static void main(String[] args) { String a = &amp;ldquo;Андрей&amp;rdquo;; String b = new String(&amp;ldquo;Андрей&amp;rdquo;); String e = new String(&amp;ldquo;Андрей&amp;rdquo;); String newE = e; boolean c = a.</description></item><item><title/><link>https://andron13.de/school/java/oop-course/038-java-object-chapter-3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/oop-course/038-java-object-chapter-3/</guid><description>Три ноги на которых стоит Java # Наследование - inheritance. https://vertex-academy.com/tutorials/ru/pravila-nasledovaniya-v-java/ Инкапсуляция - encapsulation. Полиморфизм - polymorphism. перегрузка - overloading. overriding Инкапсуляция — ограничение доступа к составляющим объект компонентам (методам и переменным).
public class Person { private String name; private String firstName; public int age; public Person(String ln, String fn) { name = ln; firstName = fn; } public Person() { this(&amp;#34;Doe&amp;#34;, &amp;#34;John&amp;#34;); } public void setName(String ln, String fn) { name = ln; firstName = fn; } public String fullName() { return (name + &amp;#34; &amp;#34; + firstName); } } import java.</description></item><item><title/><link>https://andron13.de/school/java/oop-course/039-0-java-arraylist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/oop-course/039-0-java-arraylist/</guid><description>Java ArrayList - основы # При использовании массивов можно было заметить, что у них есть один минус - они конечны. Мы не можем расширить массив. При незапланированном увеличении элементов массива мы вынуждены создавать новый массив, так как массив не меняет своей длины.
Java предоставляет ArrayList, который решает эту и часть других ограничений обычного массива. Не надо считать эти ограничения массива его недостатками. Это просто особенности, которые надо учитывать.
На примере ниже можно посмотреть различия между способами хранения информации.</description></item><item><title/><link>https://andron13.de/school/java/oop-course/040-java-uml-diagram/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/oop-course/040-java-uml-diagram/</guid><description>https://www.youtube.com/watch?v=ksvwF2sUjHM&amp;amp;list=PLBlnK6fEyqRjKA_NuK9mHmlk0dZzuP1P5&amp;amp;index=120</description></item><item><title/><link>https://andron13.de/school/java/oop-course/042-java-maven/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/oop-course/042-java-maven/</guid><description>Java и Apache Maven — фреймворк для автоматизации сборки проектов # В предыдущем уроке мы собрали свою библиотеку и говорили о сборке своего собственного приложения. Хотя ни одного приложения ещё и не сделали.
Представьте, что мы до сих пор собирали телескоп, что бы посмотреть на звёзды. И вот собрав его мы теперь можем изучать планеты, звёзды, луну, солнце. С чего начать?
Примерно перед таким же выбором стою и я. Вы выучили основы и вам можно рассказывать всё.</description></item><item><title/><link>https://andron13.de/school/java/oop-course/043-java-gradle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/oop-course/043-java-gradle/</guid><description>Gradle - сборщик для Android &amp;amp; C # Мир программирования это мир конкуренции. Вопрос, почему придумали Gradle отвечается сам собой. Потому что програмисты тоже человеки. А человеки всегда находятся в поиске. И даже улучшение работы на пару процентов уже для многих может иметь решающее значение.
Gradle подходит к решению некоторых задач по другому чем Maven и активно используется многими фреймворками так же как и Maven на ваш выбор или даже безальтернативно - только Gradle.</description></item><item><title/><link>https://andron13.de/school/java/oop-course/044-java-testing-junit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://andron13.de/school/java/oop-course/044-java-testing-junit/</guid><description>JUnit - тестировние приложений в Java # В начале перед первым уроком я стоял перед выбором какую из &amp;ldquo;страшных&amp;rdquo; технологий, дать в самом начале и не говорить что они страшные. В итоге я решил, что Git та технология, которая даётся сложнее всего и в каждом уроке стоит немного уделять ему внимания. Потому что без написания код нельзя выучить методы работы с Git.
Однако существует ещё одна технология, которая невозможна сама по себе, она требует уже написанного кода.</description></item></channel></rss>
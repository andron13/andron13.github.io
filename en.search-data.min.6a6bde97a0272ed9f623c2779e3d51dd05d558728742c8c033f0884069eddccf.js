'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/school/html/01-html-intro/','title':"01 Html Intro",'content':"Веб-девелопмент — пособие для начинающих #  Предисловие #  Свой первый сайт я сделал ещё в 96-м году. Просто скопировав исходники с сайта модного компьютерного журнала и поставив их на свой. Принципиально это не самый плохой способ. Подсмотреть и сделать лучше. Что бы понять как это работает — просмотр чужих примеров просто обязателен.\nПоследние пару лет слово пример практически не используется в моём IT-круге. Принято говорить кейсы, кейс клиентa, пользовательский кейс. И это важная черта компьютерных разговоров. Очень много англицизмов. Невозможно перевести всю документацию на языки пользователей. Английский как язык технического документооборота принят на многих фирмах, где англичан к примеру никогда и не было, да и команда разработки к примеру - русская. В одной из таких фирм меня шеф бил по рукам за комментарии в коде на русском языке.\nАнглийский #  Это я к тому, что если вы не выучите английский, то шансов стать хорошим разработчиком у вас нет. И мы подошли к главному - для кого это пособие. Сейчас, когда написана только первая глава, я вижу, что книга должна помочь взрослому человеку разобраться в мире веб-технологий. То есть это пособие для меня в прошлом, когда я не знал с чего начинать учить Frontend.\nВполне возможно, что оно поможет и редакторам сайтов, которые не собираются углубляться в веб-строительство, а просто хотят хорошо делать свою работу. Как минимум для вас, моих коллег-редакторов я и сделал обзор тегов HTML и их возможностей. Один раз ознакомиться с этим списком важно для любого человека, который пишет в этом вашем интернете.\nНадеюсь это пособие поможет и тебе.\nHTML и 2019 год #  Официально интернет пришёл в разные страны по разному.\nНациональные доменные зоны #     Домен Назначение Дата появления     COM Коммерческие для всех 1 января 1985   US США 15 февраля 1985   DE ФРГ 5 ноября 1986   SU Советские Союз 19 сентября 1990   UA Украина 1 декабря 1992   RU Россия 7 апреля 1994   BY Республика Беларусь 10 мая 1994    В 95-м году интернет на территории бывшего СССР стоил больших денег и был скорее доступен сотрудникам научно-технических организаций и студентам высших учебных заведений. В это же время в странах западной Европы и США были уже частные интернет провайдеры, которые предлагали доступ для частных лиц из дома. В Германии на тот момент час \u0026ldquo;звонка\u0026rdquo; с модема на модем внутри города стоил около 5 немецких марок(2,5€).\nКак мы видим интернет тогда был и на Западе уделом богатых или умных, или умных и богатых. Так он и развивался, медленно, лишь постепенно становясь доступным массовому пользователю и бизнесу. Развиваясь, в нём появлялись деньги, исполнители, знания, новые требования, новые возможности. И он менялся; прокладывались новые линии, придумывались новые языки, библиотеки, методы решения проблем и \u0026hellip; снижался порог входа.\nТо, что мы сегодня называем интернетом очень и очень отличается от того, что называли интернетом в 1994 году.\n HTML5 - сегодняшний стандарт интернета - принят в 2014 году. CSS3 - существует с 2000 года. React, который используется сейчас чуть ли не на 80% новых сайтов вообще придуман в 2014 году.  Технологии действительно новы и вместе с вами их учат и \u0026ldquo;бывалые\u0026rdquo; программисты. Так что это примерно как с правилами дорожного движения. У старых водителей есть опыт, у новых водителей знания. И где-то за два года работы каждый новенький становится стареньким.\nЭто всё просто #  Нет, серьёзно! Это всё несложно. До определённой степени. Ну так же несложно как писать красивые письма, делать презентации или отсылать письма.\nHypertext Markup Language #  HTML (Hypertext Markup Language) - не язык программирования, a язык разметки. С помощью него нельзя вычислить траекторию полёта, предсказать погоду на завтра или смоделировать поведение человека. Это просто правила отображения текста на экране.\nЧто мы должны понять и запомнить? C помощью HTML мы указываем параметры текста, что является заголовком, что чужой цитатой, что считать аббревиатурой, а что статьёй. Указателей для текста или правил много, больше сотни. Но все их можно выучить за неделю. С учителем. Без учителя до месяца. Даже мне понадобился всего месяц, что бы с нуля пройти весь HTML5. А мне уже за 40, плохое зрение, одышка и желание учиться новому так себе, на самом деле. Я к чему - это действительно несложно. Это HTML.\nСуществует множество способов разметки текста. Ваш простой ворд-файл тоже сохраняется в одной из таких разметок. В этом пособии я коснусь HTML, XML, Markdown. Первых два - общепринятые способы хранения \u0026ldquo;компьютерных данных\u0026rdquo;. Markdown — один из самых популярных, на данный момент, способов написания документации. Помимо HTML мы коснёмся достаточно подробно CSS и совсем немного JavaScript, чисто что бы понять, что это такое.\nДавайте начнём!\nРедактор HTML #  При обучении любой компьютерной технологии первым уроком учат писать Hello World!\nЯ не могу бросить вызов сложившийся культуре, но первым делом нам придётся выбрать инструменты где мы будем это писать.\n   Название эдитора Короткое примечание     Atom Очень приятный и достаточно популярный эдитор от платформы Github (это слово надо знать - Github)   Sublime Text Очень популярный редактор у маководов.   Visual Studio Code Очень, очень годный продукт от Microsoft. В нём я пишу это пособие   WebStorm Раньше был бесплатен. На данный момент для студентов есть возможность бесплатного использования. Практически обязателен к установке. Jetbrains продукты внешне очень похожи между собой. У меня он установлен, как и все выше перечисленные редакторы.   Notepad++ Любимый редактор моей жены. Сам, я лично не использую этот реактор, потому что он мне напоминает встроенный windows-редактор. Но должен сказать, что Notepad++ популярен и среди разработчиков. И очень неплох.    Вы можете установить все эти редакторы и перепробовать их по очереди. Работать с ними одновременно или разделить их по языкам. Например, я использую \u0026ldquo;Visual Studio Code\u0026rdquo; для написания документации к софту и в нём у меня очень много плагинов. В Webstorm пишу уже непосредственно сайты, а Sublime у меня без плагинов, очень лёгкая и его я запускаю часто вторым редактором. Выберете свой редактор из списка или спросите друзей. Кстати очень неплохой совет. Редакторы в 2019 году достаточно сложны. И настроить для повседневной работы получится далеко не сразу. Лишний совет никогда не помешает. Спросите, чем пользуются ваши друзья.\nРабочая папка и домашняя директория #  Во-первых, давайте создадим папку в которой вы будете работать. Например в домашней директории папку \u0026ldquo;HtmlLessons\u0026rdquo;. И уже здесь у вас могло возникнуть два вопроса: что такое домашняя директория и почему не \u0026ldquo;html-lessons\u0026rdquo;.\nДомашняя директория под Виндовсом обычно c:/users/\u0026ldquo;имя пользователя\u0026rdquo; и в компьютерной терминологии обозначается просто значком тилда — \u0026ldquo;~\u0026rdquo;, потому что в терминале в неё попасть можно через тилду. Под Линуксом разумеется можно попасть через тилду. Под Виндовсом тилда вызывает домашнюю директорию только в линуксоподобном теминале, например Bash. Который вам тоже придётся рано или поздно поставить, потому что иначе вы не научитесь работать с Git(вы же запомнили слово GitHub вверху?).\nБез упоминания слов Linux, Bash, Git стать программистом сложно. По этому лучший совет от меня - выписывать все оставшиеся непонятными слова и искать их в поиске. Языки программирования мало чем отличаются от обычных иностранных языков. Кому-то они даются легко, а кому-то сложно. Если вы из второй категории, то сжимаем зубы и зубрим.\nGit #     Термин Ссылка Пояснение     Git https://git-scm.com/downloads Git - это очень популярная технология контроля версий, используемая при разработке програмного обеспечения и веб-приложений. Онлайн инструкция на русском языке   Github https://github.com/ Популярный сервис для хранения Git-репозиториев. С 2018 года принадлежит Microsoft   Bitbucket https://bitbucket.org/ Популярный сервис для хранения Git-репозиториев. Принадлежит Atlassian и очень тесно интегрирован с популярными IT-приложениями этой формы как Trello или Jira   Gitlab https://gitlab.com/ Альтернативный сервис для хранения Git-репозиториев.    Вам не надо скачивать и ставить всё это сразу. Но когда первый страх пройдёт, когда вы начнёте разбираться с HTML - вернитесь и попробуйте разобраться с GIT. Мне на это понадобилось несколько попыток. Примерно с пятой я начал разбираться и не вздрагивать при слове Git.\nЯ не мог не сказать про тилду, линукс, bash-терминал и Git. Уже более чем в половине видеоуроков для начинающих люди показывают всё с маков или линуксов и активно используют \u0026ldquo;~\u0026rdquo; не объясняя что это. Это очень важное сокращение, которое я тоже активно буду использовать. Потому что для меня WEB - это мир иксов(Linux, Unix, Mac OS X).\nОчень краткая методичка по работе с Git.\nКебаб из верблюдов и змей #  Второй вопрос, который у вас должен был возникнуть почему папка названа большими и два слова не разделены минусом. Вопрос очень хороший. Спасибо Андрей, что задал его. Отвечать будет тоже Андрей.\nЛинукс различает написание строчных и прописных букв(маленькие и большие), а виндовс нет. И как бы вы не назвали файл или папку, вы должны помнить, что если вы будете хранить бекап на своём компьютере, то \u0026ldquo;одинаковые\u0026rdquo; файлы могут привести к проблемам. В HTML в принципе стараются писать всё маленькими буквами(строчными) и соединять слова через тире. Для домашнего компьютера я больше предпочитаю \u0026ldquo;CamelCaseNotation\u0026rdquo;, когда всё пишется маленькими буквами, без тире, но начальные буквы каждого слова пишут с большой буквы, так принято например в языке программирования Java. Другой вариант написания через \u0026ldquo;-\u0026rdquo; называется kebab-case или lisp-case. Всё понятно? Но вы зря расслабились, это ещё не конец. У нас есть Snake case. Это змейка \u0026ldquo;foo_bar\u0026rdquo;. Но и это было бы слишком просто. Есть upper_snake_case и lower_snake_case. Запутались? Давайте табличку сделаем.\n   Название термина Пример Ссылка на википедию     CamelCase HelloWorld.java Расспространённая система обозначения переменных и файлов в Java   snake_case регистр_длинный_как_змея Расспространённая система обозначения переменных в Perl, Python, PHP, Ruby   kebab-case шашлычный-регистр Язык Lisp использует такой регистр. Или Gatsby.js    Система, которой вы будете пользоваться не имеет большого значения, это скорее зависит от того на какой машине вы работаете и с какими технологиями. Самое главное, что бы вы были последовательными. Иногда это вообще не ваш вопрос, а политика фирмы. Спросите шефа как работает ваша фирма и следуйте указаниям. Порой это требования клиента. И от проекта к проекту настройки могут отличаться.\nВозвращаясь к эдиторам. Иногда на фирме есть стандарт, который нельзя нарушать или технически не очень удобно использовать другой.\nConvention #  Таких религиозных вопросов в работе будет немало. Обычно для каждого языка есть конвенции(Convention). Конвенция - это свод правил, которые программисты выбрали для данного стэка(технология). Если хотите, своеобразное джентльменское соглашение Запрос \u0026ldquo;CSS Naming Conventions\u0026rdquo; выдаёт правила написания кода для CSS, которым вы будете следовать, если дойдёте до главы \u0026ldquo;CSS - это вооооообще лёхка!\u0026rdquo;\n"});index.add({'id':1,'href':'/school/html/','title':"Html",'content':"Введение в HTML #  По мере написания будут появляться новые главы. Творческих успехов и вам.\nВведение\n"});index.add({'id':2,'href':'/school/java/','title':"Java",'content':"Java #  К данному курсу ведётся:\n Git-репозиторий с кодом и видео уроки.  "});index.add({'id':3,'href':'/school/java/basic-course/001-java-setup/','title':"001 Java Setup",'content':"HelloWorld.java — первая программа на Java — введение в Java 001 #  Установка JDK #  В интернете существуют тысячи инструкций по установке окружения для работы в Java.\nЯ уверен, что вы сможете вбить в Google запрос на английском: \u0026ldquo;How to Install Java Development Kit\u0026rdquo; или на русском: \u0026ldquo;Установка JDK\u0026rdquo;. Java принадлежит фирме Oracle и можно сразу скачать Java с её страниц, скачав просто JDK, скачав Netbeans вместе с JDK или скачав открытую AdoptOpenJDK (предпочтительнее для новичков).\nJava Development Kit #  JDK — это программа, которая будет переводить написанный вами код в понятный для машин. На вашей машине может быть установлено несколько разных версий Java. Одной из них должна быть Java 8.x. Это та версия, на которой базируются все современные версии, и для изучения основ языка и ООП именно оно нам и \u0026ldquo;нада\u0026rdquo;.\nСкачать JDK можно с AdoptOpenJDK:   Скачать AdoptOpenJDK   Скачать JDK можно с Oracle:   JDK download Oracle   Уверен, вы справитесь с установкой этой программы самостоятельно или с помощью Google.\nРабота с Java #  Работа с Java \u0026ldquo;по старинке\u0026rdquo;.\nВо всех языках программирования стало стандартом первым уроком выводить на экране строчки \u0026ldquo;HelloWorld!\u0026rdquo;.\nКто я такой, что бы идти против правил? Сегодня мы напишем нашу первую программу и выведем на экран \u0026ldquo;Привет Мир!\u0026rdquo;.\nМы создаём файл в редакторе(эдиторе) и сохраняем его под названием HelloWorld.java\n/** * Created by www.andron13.de on 27.12.2016. **/ public class HelloWorld { // Начало нашего класса HelloWorld  public static void main(String[] args) { // Начинаем наш метод, главный метод (мэйн)  System.out.print(\u0026#34;Привет \u0026#34;); System.out.println(\u0026#34;Мир! :-)\u0026#34;); System.out.println(\u0026#34;\\t Hello World!!!\u0026#34;); } // Закрываем главный метод } // Закрываем класс Сразу обращаем внимание на два слеша (слэш, слеш, а также slash, с англ. — «разрез, порез», «резкий удар», «косая черта»), которыми в конце строки можно отделить пометки в тексте. Также комментировать код можно, выделив его с двух сторон звёздочкой и слешем вот так: /* комментарий тут */. Комментарии в коде очень важны. Уже пару дней спустя не всегда очевидны некоторые решения и названия переменных. В иной программе может быть с десяток классов и в каждом — по несколько переменных. И все они что-то там считают, куда-то там что-то передают и зачем-то все вот прям здесь, и \u0026ldquo;кто это вообще написал\u0026rdquo;. Не стесняйтесь комментировать свой код и свои решения. Привычка писать \u0026ldquo;понятный\u0026rdquo; код поможет вам и в учёбе, и в работе.\nЗапускаем терминал или командную строку под Windows: Cтарт-\u0026gt; CMD-\u0026gt; Выполнить.\nКомпилируем и запускаем код:\njavac HelloWorld.java // или javac -encoding utf8 HelloWorld.java // и запускаем с помощью java HelloWorld Внимание - параметр -encoding сработал не во всех версиях JDK на 2.07.2020. Версии от Oracle поддерживают код выше.\n  терминал   С помощью javac мы создаём из нашей программы код, понятный машине. Не считаю нужным углубляться в детали этого процесса, но и ничто не мешает вам почитать о:\n байт-коде, компиляторе, JVM, SDK, JDK  на других полезных ресурсах. История JVM (Java Virtual Machine) очень интересна, ведь ей уже более 20 лет.\nПри запуске мы увидим все системные сообщения на экране. Изменяя параметры программы, мы изменяем результаты. Это и есть программирование. И мы только что написали нашу первую программу.\nЕсли у вас не прошла компиляция, как у меня, попробуйте скомпилировать с помощью учёта кодировки. Кириллица до сих пор не всегда хорошо работает в терминалах Windows. Если у вас не прошла компиляция вообще, то проверьте параметры настроек Java под Windows.\nНе забывайте, что вы должны находиться в той папке, которая внесена в настройках в рабочие Java_Home.\nВ AdoptOpenJDK можно при инсталляции пакета указать на установку Java_Home.\nУстановка Adopt Open JDK:   установка AdoptOpenJDK   Если у вас всё получилось — поздравляю! Вы только что поняли, как именно работали первые Java-кодеры.\nЕсли у вас не всё получилось — не расстраивайтесь. В следующих уроках я подробнее расскажу, как удобнее работать с программами без командной строки и ручной компиляции. Вы можете спокойно переходить ко второму и третьему уроку. С ними всё встанет на свои места.\nСреда разработки Java — выбираем IDE программирования #  Среда разработки Java: Android Studio, IntelliJ IDEA, NetBeans IDE, Eclipse Java Neon\u0026hellip;\nПервую программу на Java я написал в обычном эдиторе на Solaris. Потом компилировал \u0026ldquo;ручками\u0026rdquo;. И запускал тоже ручками, примерно так, как было описано выше. И радовался тогда, очень радовался, если компилятор не выдавал ошибки и, уж тем более, испытывал настоящий восторг, если приложение делало, то что я и хотел. Позже я помню дотошную настройку под Windows 95. С внесением рабочей Java-папки в переменную среду пользователя.Поверьте на слово, порой я настраивал эти переменные среды часами.\nБыло много чего испробовано:\n UltraEdit Notepad и Notepad++ PHP Expert Editor Visual Studio Code Sublime Text и многие другие  Но время редакторов и даже очень хороших редакторов прошло, и если для очень быстрых вещей, особенно за чужим компьютером, я с удовольствием использую портабельный \u0026ldquo;Notepad++\u0026rdquo; с флэшки, то дома я работаю в другой среде. Не в редакторе. А именно среде. И с объяснения термина \u0026ldquo;интегрированная среда разработки\u0026rdquo; мы и начнём.\nИнтегрированная среда разработки - IDE #  Программа для написания кода должна упрощать жизнь программиста и ускорять его работу, например:\n \u0026ldquo;подсвечивать\u0026rdquo; нужные фрагменты, скобки, переменные и т.д. и давать возможность настроить или отключить часть подсветки; подсказывать или \u0026ldquo;автозаполнять\u0026rdquo; код программисту, угадывать, если хотите, что именно он хочет написать; возможность менять дизайн отображения кода; быстро и чётко показывать результат; быстро переключаться между проектами; \u0026ldquo;самостоятельно\u0026rdquo; контролировать версии (например закидывать всё на GIT); помогать найти ошибки в коде и, тем более, синтаксические и орфографические ошибки; и многое другое.  Понятно, что всё это не про Notepad и даже не про Notepad++, хотя с подсветкой справляются многие \u0026ldquo;мелкие\u0026rdquo; редакторы. На рынке сейчас есть несколько крупных программ, которые заявляют себя как JAVA-IDE: это Eclipse (Eclipse Java Neon), IntelliJ IDEA (от JetBrains), NetBeans IDE (от Oracle), Android Studio (от Google \u0026amp; JetBrains).\nДавайте я скажу по \u0026ldquo;два слова\u0026rdquo; о каждой из них:\nAndroid Studio #  Android Studio — основан на IntelliJ IDEA с добавлениями, которые нужны при работе с android приборами. И, на самом деле, это среда разработки под Android на Java. И, говоря о плюсах или минусах, мы всё равно обсуждаем IntelliJ IDEA.\nNetBeans IDE #  NetBeans IDE — рабочая среда от владельцев Java. Можно программировать, есть подсказка, есть подсветка. С моей точки зрения, это очень тяжёлый Notepad++ со встроенным компилятором. Но, на самом деле, NetBeans совсем не так уж плох. И не надо забывать, что он бесплатный и предоставляется компанией, которой принадлежат права на Java.\nIntelliJ IDEA #  IntelliJ IDEA — редактор, утверждающий, что это IDE для Java и всех JVM-языков. Вполне возможно, что это так. Есть бесплатная версия и платная расширенная версия для Java EE (Java Platform, Enterprise Edition). Думаю, что многим будет важно узнать, что программу делают русскоязычные ребята.\nEclipse #  Eclipse — среда разработки для всего. Всех языков, всех платформ. Очень старая программа. Примерно треть всех разработчиков Java сидят в этой программе. Программа выросла из внутренних разработок фирмы IBM и, действительно, известна всем. На мой взгляд, главный конкурент любой среде разработки.\nVisual Studio Code #  Visual Studio Code — изначально этот эдитор не был описан в этой статье. Однако, со временем, я всё чаще и чаще писал программы и документацию именно в нём. Мощный эдитор с огромным комъюнити и огромнейшим количеством полезных плагинов для всех видов разработки.\nЯ использую на работе NetBeans IDE, а дома IntelliJ IDEA и, на самом деле, вы не всегда можете контролировать то, в какой среде вы будете работать. Бывают ситуации, когда работать приходится просто в блокноте. Я веду к тому, что ознакомиться стоит со всеми программами и быть готовым к тому, что их придётся использовать.\nПрежде чем выбирать окончательное решение, стоит поставить, может быть, все IDE и решить самому. Я лично надеюсь, что и Eclipse, и IntelliJ IDEA, NetBeans IDE будут чувствовать себя хорошо и жить долго, чтобы мы могли наслаждаться качеством конкуренции.\nЯ считаю, что в 2020-м году стоит начать с адекватной программы, и мой выбор падает на бесплатную intellij idea community edition, именно в ней будут даны первые уроки.\nУстановка и настройка IntelliJ IDEA для работы в Java #  IntelliJ IDEA — среда разработки программного обеспечения, сделанная в Кронштадте Санкт-Петербурге. Отличие среды разработки(IDE) от редакторов в том, что среда разработки должна \u0026ldquo;предугадывать\u0026rdquo; мысли и действия программиста. Можно, пожалуй, сравнить обычную бумажную записную книжку с телефонами друзей и электронную в телефоне. Удобство пользования электронной намного выше.\nПовторюсь, что, прежде всего, у разработчика должна быть установлена на компьютере восьмая и/или актуальная версия JDK. На данный момент за Java Development Kit отвечает Oracle и у него можно скачать актуальную версию тут. На момент написания статьи это была версия 8.02, и скачать её можно было как отдельно от NetBeans IDE 8.2, так и вместе. Я выбрал JDK 8u111 with NetBeans 8.2. Я очень надеюсь, что будущему разработчику не надо объяснять, какой кнопочкой скачивать из интернета. После установки JDK можно перейти к IntelliJ IDEA.\nIntelliJ IDEA можно скачать на сайте www.jetbrains.com/idea/. Пожалуй, стоит знать, что там же качается и PhpStorm для php и PyCharm для Python.\nIntelliJ IDEA есть в двух версиях — в бесплатной Community и платной Ultimate. Обе версии бывают только на одном языке, и это не русский. Для введения в Java бесплатная версия ничем не хуже платной. Различия в версиях можно посмотреть на сайте производителя перед скачиванием.\nЕсли вам жизненно необходима Ультимативная версия, то не скачивайте \u0026ldquo;лекарство\u0026rdquo;, не ломайте софт и не прописывайте левый сервер в лицензиях. Вы не сможете обновиться, а обновления бывают достаточно часто. Просто скачайте ультимативную версию и закажите себе бесплатные студенческие логины. Подробности студенческой лицензии тут — www.jetbrains.com/student/. IDEA нет на русском языке. Если русский язык очень важен, то у вас есть возможность работать с русским интерфейсом на NetBeans.\nПри установке можно для начала согласиться со всеми настройками по умолчанию и дойти до создания нового проекта. Проектов может быть множество. Например, игра для андроид-приборов или прошивка для \u0026ldquo;умного холодильника\u0026rdquo;. Предположу, что вы не знаете, как будет называться ваша первая программа, поэтому можете назвать проект \u0026ldquo;myFirstJavaProject\u0026rdquo;, \u0026ldquo;JavaBeginner\u0026rdquo; или \u0026ldquo;JavaFromAndron13\u0026rdquo;. Название можно поменять позже, проект можно удалить или перенести файлы из проекта в проект, и поэтому над названием можно особо долго не думать. Желательно, что б оно было говорящее само за себя. На случай если у вас будет 20-30 или даже 1000 проектов.\nДомашнее задание #   Поиграйтесь с выводом строчек в своей среде разработки и попробуйте написать нормальное предложение.  Пример выполненного домашнего задания:  public class HelloWorld { // Начало нашего класса HelloWorld  public static void main(String[] args) { // Начинаем наш метод, главный метод (мэйн)  System.out.print(\u0026#34;Привет \u0026#34;); System.out.println(\u0026#34;Мир! :-)\u0026#34;); System.out.println(\u0026#34;\\t Hello World!!!\u0026#34;); System.out.print(\u0026#34;\\t И ещё строчка :-)\u0026#34;); System.out.print(\u0026#34;Это моя первая программа \\n\u0026#34; ); System.out.print(\u0026#34;\\u0423\\u0440\\u0430 \\n\u0026#34;); System.out.println(\u0026#34;- Mein erstes Programm :-)\u0026#34;); //моя первая программа  } // Закрываем главный метод } // Закрываем класс  Удалите все комментарии из кода и запустите снова. Научитесь быстро находить и печатать следующие символы(они все нам понадобятся при изучении Java) - \u0026#34;() {} [] ^^ || \u0026amp;\u0026amp; %% __ -- ++ ** // \\\\ \u0026#39;\u0026#39; ~~ ;; :: ,, .. \u0026lt;\u0026gt; == !=\u0026#34;  В строке выше 22 пары символов. У вас 22 секунды на написание этой строки самостоятельно.  Дополнительные материалы #   List of Unicode characters https://en.wikipedia.org/wiki/List_of_Unicode_characters  "});index.add({'id':4,'href':'/school/java/basic-course/','title':"Basic Course",'content':"Java #  К данному курсу ведётся:\n Git-репозиторий с кодом и видео уроки.  И конечно же задачник #   Задачник  Логика-01    Сами уроки #   Уроки online  Java setup Целочисленные типы данных    "});index.add({'id':5,'href':'/school/java/exercises/','title':"Exercises",'content':"Задачи для курса введение в веб-программирование. #  "});index.add({'id':6,'href':'/school/tools/','title':"Tools",'content':"Java #  К данному курсу ведётся:\n Git-репозиторий с кодом и видео уроки.  "});index.add({'id':7,'href':'/school/','title':"С чего начать",'content':"Какой же язык программирования лучше изучать первым #  Перед тем как выучить основы программирования в своём первом выученном языке, я задавал этот вопрос десятки раз. И лучше всего мне ответили единожды. Ответом был — английский. На самом деле доля правда в этом есть.\nСовременные языки так сильно пытаются упростить вхождение в основы, что написанный код читается уже почти как нормальный произносимый английский: \u0026ldquo;Возьми переменную а, и пока она меньше 10, прибавляй к ней переменную б.\u0026rdquo; Без английского очень часто никак и никуда. Если говорить о современных компьютерных реалиях, то лично моё мнение далеко не однозначно.\nСписок языков, разметок, скриптов и технологий с которыми стоит ознакомиться:\n Java C# Python PHP Javascript HTML CSS XML Word Excel PowerPoint Access Реляционные базы данных, например MySQL, SQL или Derby PowerShell Swift UML Реляционная алгебра Булева алгебра Теория множеств Тестирование программного обеспечения Разработка программного обеспечения  Поверьте мне, что любой программист раскритикует данный список в пух и прах и предоставит свой. Но позвольте я сначала объясню, что я подразумеваю под каждым пунктом.\nJava #  Java — высокоуровневый объектно-ориентированный язык программирования со строгой типизацией переменных. Программы на этом языке работают практически везде, на мой взгляд, это математически хорошо структурированный язык, с прекрасной обучающей документацией и на русском языке. Разработчики и программы на Джаве нужны практически везде: в банковском секторе, на заводах, в медицине и вебдевелопменте(например, поиск). Программы на андроид используют Джаву. Определённо, человек осиливший джаву, не испугается необходимости обучению ещё одному языку. Джава достаточно, если не очень, сложна в обучении и требует хорошего абстрактного мышления. Пример применения в играх — Майнкрафт. Именно с этого языка началось моё знакомство с программированием и, несмотря на все тяжести обучения, я даже полюбил этот язык. Немножко. :)\nC# #  C# — почти всё, что было сказано про Джаву можно сказать и про Сишарп. Майкрософт попытался сделать свою Java и, конечно, языки очень похоже и внешне. Прежде всего, оба языка называются си-подобными. Разница между Си и Джавой с Сишарпом только в уровне. Си низкоуровневый язык, что значит доступ \u0026ldquo;к железу\u0026rdquo; напрямую. А Джава и Сишарп — высокоуровневые, что значит доступ \u0026ldquo;к железу\u0026rdquo; через прослойку в виде операционной системы. Это не плохо и не хорошо. Это просто особенности языков со своими плюсами и минусами, которые следует учитывать при разработке. Если говорить только о Сишарпе, то стоит сказать, что очень многие приложения для смартфонов сделаны на Unity3d, что в свою очередь использует C# и Javascript. Мораль. Если вам интересна десткопная разработка под Windows10 и позже, то скорее всего, вам стоит посмотреть в сторону C# внимательнее. Изучение основ Джавы или Си перед изучением C# совсем не помешает.\nPython #  Python — помимо того, что Питон (или Пайтон) современный и объектно-ориентированный, он ещё и достаточно широко используется. Питон по легенде придуман после попытки выучить Java. Задача стояла сделать синтаксис языка как можно проще, меньше и понятнее. Частично это удалось и, на мой взгляд, Питон — самый распространённый язык среди таких не профессиональных программистов, как бигдата-аналитиков, систем-администраторов, математиков и прочих. С этого языка определённо можно начать знакомство с миром машин. Существует масса уроков онлайн и поддержка комьюнити.\nPHP #  PHP — среди \u0026ldquo;настоящих\u0026rdquo; программистов ходят шуточки про PHP-кодеров. Суть их сводится к тому, что PHP ненастоящий, несерьёзный язык, в нём нет, к примеру, чёткой типизации данных и нет объектов. И, исходя из этого, в PHP кодят те, кто не осилил \u0026ldquo;нормальный\u0026rdquo; язык, как Си, Java, Python и тд. На самом деле, частично всё так. В PHP очень много случайных людей, они пилят свои маленькие псевдосайтики и у них самые маленькие зарплаты в отрасли. Но такое наблюдается практически только среди джунов и, частично, мидлов. Опытные разработчики прекрасно разбираются в архитектуре, проектировании и объектах. И зарплаты у опытных спецов ничем не хуже, чем у коллег из смежных специальностей. Помимо того, уже сейчас в новых версиях PHP активно используется ООП и новые версии фрейморков, например Drupal, вовсю используют \u0026ldquo;сложные\u0026rdquo; технологии, которые раньше в вебдеве были только в энтерпрайзе. Я считаю, что в коммерческой веб-разработке без знания PHP сложно. И можно записать в список изучения PHP, если вы хотите добиться успехов. Именно список. К английскому и PHP добавятся ещё некоторые вещи.\nJavascript #  Javascript — история наименования языка показывает, что нейминг — далеко не бесполезная наука. На данный момент Javascript не менее популярен, чем Java. Javascript используется в вебразработке и уже при создании почти всего. Браузеры же есть везде, а там где есть браузеры, может быть использован и Яваскрипт. Уже упомянутый выше фреймворк Unity3d использует и наш Javascript. И, несмотря на это, я бы его внёс в список изучения не на первом месте. Но всё же обязательным к изучению для всех. Потому что интернетом пользуются все, а интернет и Яваскрипт сегодня \u0026ldquo;неотделимы\u0026rdquo;.\nHTML #  HTML — Hypertext Markup Language. Не язык. Вообще никак не язык. Это просто разметка страницы. Знание основ Hypertext Markup Language входит уже в общее образование, как знание геометрии. Поэтому уговаривать его учить смысла нет. Если вы ещё не знаете, как выглядит HTML-страница изнутри — учите!\nCSS #  CSS — Cascading Style Sheets. Это стили, помогающие отобразить информацию в HTML-документе корректно. Без CSS современная веб-разработка уже невозможна. Первоначально служило дополнением к HTML. На сегодняшний день применяется много шире. К примеру GUI (графический интерфейс) Java в последней версии — JAVAFX использует элементы CSS для отображения информации. В связи с этим, кем бы вы не хотели стать, для чего бы вы не использовали навыки кодирования, скорее всего вам пригодятся знания каскадных стилей. Основы HTML и CSS неподготовленному студенту-филологу можно выучить за 5-10 полноценных учебных дней.\nXML #  XML — ещё один тип разметки, eXtensible Markup Language. Интересен для изучения тем, что разобраться с ним можно за несколько часов, максимум за пару дней. А вкупе с HTML помогает понять, что разметки не такие уж и сложные, и каждая следующая будет даваться легче и легче. Например MD — Markdown, который всё чаще встречается вместо привычного txt-формата. Следует осознать, что иксмл используется везде. В Java, Андроид-разработке, веб-разработке, в создании маленьких \u0026ldquo;домашних\u0026rdquo; \u0026ldquo;баз данных\u0026rdquo;. Если хотите, то это то, что надо выучить первым. И перенести всю коллекцию фильмов в формат XML.\nWord #  Word — в бытность шефом одной небольшой веб-студии, мне очень хотелось скинуть часть скучных обязанностей на своих сотрудников. Не получилось. В совершенстве ни вордом, ни экселем, ни поверпойнтом не владел никто. В итоге был вынужден заняться самообучением и выучить пакет MS Office самостоятельно. И поверьте мне, там есть что учить. В среднем, продвинутым пользователем в ворде можно стать за две-четыре недели обучения. И это пригодится, тем более, программисту. Как вы думаете в какой программе вы будете делать 100-страничную документацию к бухгалтерской программе и вебсайту для средней пиццерии? Что, серьёзно, не задумывались, что всё это кому-то надо делать? Ещё раз - ВОРД!!! Полноценное образование без ворда невозможно.\nExcel #  Excel — MS Excel или Google Spreadsheet. Это то, что надо выучить. Вместо \u0026ldquo;или\u0026rdquo; можно поставить \u0026ldquo;и\u0026rdquo;, и добавить Libre Office. Уверенно чувствовать себя надо везде. Сложные формулы в Google Spreadsheet пишутся кстати на Яваскрипте, а в Екселе на VBS. VBS учить не рекомендую вообще. Малоперспективный скрипт, который забыт даже производителем. MS Excel — это наиболее широко используемая система функционального программирования и помимо того, что помогает в профессиональном плане, никогда не будет лишним и в повседневной жизни.\nPowerPoint #  PowerPoint — или любая другая программа для составления презентаций. В данном случае производитель абсолютно не имеет значения. Но я Виндовс-пользователь и мне проще говорить о продуктах Майкрософт. Я немало поездил по отраслевым конференциям и могу сказать, что далеко не все спикеры умеют выжимать из презентационных материалов максимум возможностей. Умение доступно выражать свои мысли, в том числе, перед коллегами и клиентами поможет в работе неимоверно.\nAccess #  Access — работа с базами данных. В сети достаточно материалов по всем продуктам майкрософта и обучение с Access тем легче, что зачастую он уже есть на компьютере и ничего не надо ставить дополнительно. Программисты хранят данные в базах данных. Системные администраторы администрируют, в том числе, и базы данных. А проектировщики должны, в том числе, понимать, что такое проектирование базы данных. Суть — надо, но, может, всё-таки не в самом начале списка.\nРеляционные базы данных #  Реляционные базы данных, например MySQL, SQL или Derby — существуют различные системы управлениям базами. Ударение стоит сделать на реляционных базах данных. И на MySQL. Но всё же большей разницы, на самом деле, нет. После полноценного изучения MySQL (2-4 недели) каждая следующая система учится за день-два. Если вы учите Java, то вам интересна Дерби и MySQL, если вы хотите учить PHP, то мимо MySQL вам не пройти. Самое главное — научиться проектировать базы, приводить их в нормальную форму и научиться составлять запросы. За месяц-два обучения можно стать очень хорошим специалистом.\nPowerShell #  PowerShell — в своё время я администрировал компы, и именно тогда я возненавидел VBS. Он мне встречался ещё при создании макросов для MS Office. VBS — очень страшная вещь, которая может отбить охоту программировать навсегда. PowerShell — это замена ненавистному скрипту. И, на удивление, замечательная замена. Если у вас Win10, то можете прямо сейчас начать изучать PowerShell и его возможности. С ним можно достичь великих целей. И это совсем не шутка. Администрирование парка машин на Win10 без знания PowerShell невозможно.\nSwift #  Swift — язык, на котором Apple рекомендует писать приложения для OSx. В том числе, и айфонов. Для этих целей я бы рекомендовал именно его тоже.\nUML #  UML — Unified Modeling Language. Язык, который практически не используется в Рунете и, тем более, в вебразработке Рунета. А зря. С помощью этого языка можно нарисовать всё, что угодно: дом, взаимодействие с новой программой, новую базу данных с отношениями и атрибутами, классы и методы с параметрами и без. Всё что угодно. И умея UML и C#, и Java, и Swift, и MySQL дадутся намного легче. Если вообще их можно выучить без знания UML.\nБулева алгебра #  Реляционная алгебра, Булева алгебра, Теория множеств — три крайне важные темы в математике, которые вам понадобятся при обучении языков программирования. Понятно, что в жизни вам может и не понадобятся знания XOR, AND, NOT или OR; но не в обучении. Без понятия булевой алгебры будет очень тяжело. 95% программ не требуют досконального знания двоичной системы, сдвигов влево и вправо, умения в уме складывать и перемножать true и false, но и скрипичный ключ, с войной и миром мне в повседневной жизни не сильно нужен. Это базовые знания. Учить. По-любому.\nМораль #  Морали нет. Путей развития множество:\n Работая в аналитике больших данных, вам никак нельзя без знания алгебры и высшей математики и, скорее всего, будет достаточно Python. Занимаясь веб-разработкой, даже такой \u0026ldquo;простой CMS\u0026rdquo;, как WordPress или Drupal вам понадобятся знания — PHP, HTML, CSS, Javascript, MySQL. Работая Windows-системным администратором, вам понадобится знание всего пакета MS Office, PowerShell, HTML, CSS, XML и алгебры. Разрабатывая под Андроид, понадобится так же немало — Java, HTML, CSS, XML, MySQL.  И, конечно же, всем нужны полноценные знания в MS Office или его аналогам, как минимум, на уровне пользователя.\nМой личный совет — составить план, где урок алгебры чередуется с уроком по Офису и программированием. И мой минимальный список изучения для Windows пользователя:\nПлан Минимум #   Реляционная алгебра, булева алгебра,теория множеств MS Office Markdown XML HTML, CSS Git Java UML Реляционные базы данных, на примере MySQL, Acces Регулярные выражения Javascript  Если вы думаете, что это много, то не забывайте, что вам, скорее всего (возможно), придётся ещё вплотную разбираться с докером, векторной графикой, фотошопом, видео- и аудио- кодеками, апи- фейсбука, инстаграмма, вконтакте, телеграма и тд, и тп.\nПенсионеры #  \u0026ldquo;Ух какой список для пенсионеров!\u0026rdquo;,- заметил мой друг забежав на мой сайт. Этому списку всего 4 года, а уже я бы что-то добавил и убрал.\nПоявились и утвердились на рынке прекрасные языки GO, Kotlin, Dart. Влияние C# на рынок стало меньше. Влияние Windows на разработку уменьшается и PowerShell вряд ли стоит ставить в список обязательно изучаемых вещей.\nТак что скорее мораль - список устарел. А писать его каждый пол-года заново дело малоблагодарное.\n"});index.add({'id':8,'href':'/posts/hello/','title':"У меня снова есть блог",'content':"Блогер это навсегда #  Около 5 лет у меня не было блога. И вот у меня снова появилось желание, а мои возможности позволяют выбирать из большего, чем 10 лет назад.\nНадеюсь до конца лета я смогу выложить свой курс введения в веб-программирование с первым языком обучения Java.\nПроверьте сами, вдруг получилось. На секундочку, сам канал сделал ещё 4 года назад - 17.10.2016.\n  ночной берлин   "});index.add({'id':9,'href':'/posts/','title':"Blog",'content':""});index.add({'id':10,'href':'/school/hidden/','title':"Hidden",'content':"This page is hidden in menu #  Quondam non pater est dignior ille Eurotas #  Latent te facies #  Lorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.\n Pater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor  Cum honorum Latona #  O fallor in sustinui iussorum equidem. Nymphae operi oris alii fronde parens dumque, in auro ait mox ingenti proxima iamdudum maius?\nreality(burnDocking(apache_nanometer), pad.property_data_programming.sectorBrowserPpga(dataMask, 37, recycleRup)); intellectualVaporwareUser += -5 * 4; traceroute_key_upnp /= lag_optical(android.smb(thyristorTftp)); surge_host_golden = mca_compact_device(dual_dpi_opengl, 33, commerce_add_ppc); if (lun_ipv) { verticalExtranet(1, thumbnail_ttl, 3); bar_graphics_jpeg(chipset - sector_xmp_beta); }  Fronde cetera dextrae sequens pennis voce muneris #  Acta cretus diem restet utque; move integer, oscula non inspirat, noctisque scelus! Nantemque in suas vobis quamvis, et labori!\nvar runtimeDiskCompiler = home - array_ad_software; if (internic \u0026gt; disk) { emoticonLockCron += 37 + bps - 4; wan_ansi_honeypot.cardGigaflops = artificialStorageCgi; simplex -= downloadAccess; } var volumeHardeningAndroid = pixel + tftp + onProcessorUnmount; sector(memory(firewire + interlaced, wired)); Тестовое вставка видео    "});index.add({'id':11,'href':'/school/java/basic-course/002-java-integers/','title':"002 Java Integers",'content':"Простые типы данных — byte, short, int, long, в примерах — введение в Java 002 #  Чтобы вызвать на экран что-то большее, чем \u0026ldquo;Привет, Мир!\u0026rdquo;, надо работать с числами, символами и буквами. Чтобы работать с ними в Java — надо научиться их хранить и передавать. Для этого нам надо познакомиться с понятием \u0026ldquo;типы данных\u0026rdquo;, а точнее \u0026ldquo;простые типы данных\u0026rdquo;.\nПростые типы данных — Java Primitives #  Существуют следующие базовые типы данных: byte, short, int, long, float, double, char, boolean и String (не совсем примитив, но базовый тип данных).\nЦелочисленные типы данных #  Мы начнём знакомство с базовыми типами данных с int.\nС помощью целочисленного типа данных, а именно так и переводится \u0026ldquo;integer\u0026rdquo;, мы храним в int целые числа. Для визуализации можно попробовать представить себе следующие примеры:\n Общепринятая нумерация домов во всем мире использует целые числа: ул. Грибоедова 15, ул. Каштановая 10, пятое Авеню 457 и т.д. Перекличка в классе тоже возможна с помощью типа данных int — первый, второй, третий, четвёртый\u0026hellip; Числа Фибоначчи: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55\u0026hellip; Возведение одного простого числа в степень другого простого числа — например 2 в степени 7 = 128.    Целые числа   Давайте совершим пару арифметических действий на практике.\npublic class HalloInteger { public static void main(String[] args) { // Создаём переменные и присваиваем им значения  int a = 2; int b = 3; int c = a + b; System.out.println(\u0026#34;Сумма a и b = \u0026#34; + c); // Найдём периметр квадрата.  int d = 4; System.out.println(\u0026#34;Периметр квадрата со стороной d =\u0026gt; P = \u0026#34; + 4 * d); } } В Java есть несколько типов данных для хранения целых чисел, это — byte, short, int, long. Принципиально они различаются только размером. Для хранения числа в \u0026ldquo;int\u0026rdquo; надо 4 байта, если речь идёт о таблице Менделеева или о простых задачах, то мы можем обойтись и примитивным типом данных \u0026ldquo;byte\u0026rdquo;. Именно столько занимает места этот тип данных, 1 байт (byte) или 8 бит. Давайте посмотрим таблицу:\n   Тип Размер (бит) Диапазон     byte 8 бит от -128 до 127   short 16 бит от -32768 до 32767   int 32 бит от -2147483648 до 2147483647   long 64 бит от -9223372036854775808 до 9223372036854775807    2 в восьмой степени = 256. Именно столько можно запомнить в примитивном типе данных переменных byte. От -128 до 127 мы можем работать с любым числом в десятичной системе, включая ноль.\npublic class HalloLong { public static void main(String[] args) { long a = 7_456_678_678L; long b = 87_456_678_678L; long c = a + b; System.out.println(c); } } Нам надо помнить только, что byte — это 8 бит, short — 16 бит, int — 32 бита, long — 64 бита. Обычно возникают 2 вопроса. Какой тип данных использовать и зачем эти 4 типа \u0026ldquo;одинаковых\u0026rdquo; данных?\nРазные типы данных сложились исторически. Из-за особенностей x86-процессоров. Всё, что нам надо помнить — это экономия: размер ячейки для хранения, мы экономим место, процессорное время, RAM компьютера или прибора пользователя, и на планете не умирают котики.\nЕсли постоянно всё писать просто в long, то наша программа будет занимать неоправданно много места, она будет \u0026ldquo;есть\u0026rdquo; память и доставлять неудобства. И действительно, зачем использовать программу в 8 гигабайт, если можно сделать её, как минимум, в восемь раз меньше?\nЕщё раз для закрепления:\npublic class IntegerTypes { public static void main(String[] args) { byte a = 111; short b = 1111; int c = 7777777; long d = 2_358_765_649l; // Постфикс l или L обозначает литералы типа long.  // L нужна только за границами int.  // В Java можно использовать подчёркивания для визуального разделения чисел.  // 2_358_765_649 = 2358765649, для программы разницы нет.  System.out.println(a); System.out.println(b); System.out.println(c); System.out.println(d); } } Пример использования byte:\npublic class AdditionByte { public static void main(String[] args) { byte a = 10; byte b = 30; byte c = (byte) (a + b); System.out.println(\u0026#34;The c variable Value after Addition is : \u0026#34; + c); } } Если сложить два byte числа, которые в сумме дают больше 127, например 70 и 80, то мы получим не 150, а отрицательное число. Byte пойдёт в минусовые значения и будет считать дальше от -128. По кругу, в своём диапазоне из 256 возможных значений. Мир типа данных Byte — всего лишь один байт. Это его ограничение.\nОпределение, объявление, инициализация переменных #  Definition, declaration, initialization #  В Java переменная определяется и объявляется одновременно:\nshort b; Отделить эти понятия нельзя. Обычно в Java говорят только о декларации переменной, когда она просто объявляется:\n \u0026ldquo;Слушайте все!!! И не говорите, что не слышали! Мы объявляем, что от сего дня создана переменная B типа шорт\u0026rdquo;.\n В момент, когда мы присваиваем переменной значение, мы говорим об инициализации переменной.\n \u0026ldquo;Отныне переменная B получает графство и значение\u0026rdquo; 3.\n b = 3; Двоичные числа и не только #  Java позволяет хранить не только десятичные числа\nint hexValue1 = 0x100; // Шестнадцатеричная система счисления int binar = 0B1001_1001; // Двоичная система счисления int octal = 0757; // восьмеричная система счисления Домашнее задание #  Найдите применение каждому типу данных из заголовка и напишите программу с использованием byte, short, int, long:\n Найти площадь и периметр квадрата Найти площадь и периметр прямоугольника Найти площадь и периметр куба Найти количество зёрен на шахматной доске, если на первую клетку положить одно зёрнышко, на вторую клетку два зёрнышка, на третью в два раза больше, чем на предыдущей, то есть четыре и так далее.    шахматы   Дополнительные материалы #   https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html Легенда о шахматах и зёрнах  "});index.add({'id':12,'href':'/school/java/basic-course/003-java-float-double/','title':"003 Java Float Double",'content':"Типы данных с плавающей точкой: float и double — введение в Java 003 #  Числа с плавающей точкой #  Для хранения дробных чисел в Java используют float и double. Правильное название — простые (примитивные) типы данных с плавающей точкой. Примитивные типы данных — byte, short, int, long, которые являются целыми числами, — мы рассматривали - здесь.\n  число Пи   Float #  Давайте сразу рассмотрим практический пример:\npublic class TestFloat { public static void main(String[] args) { float a = 3.5f; float b = 4.5F; float c = (float) 5.5; float d = a + b + c; System.out.println(\u0026#34;a+b+c: \u0026#34; + d); } } Здесь использованы три способа объявления переменных типа float. Самое важное при работе с ними — избавится от \u0026ldquo;запятых\u0026rdquo;. Java — американский язык программирования, и в американсой математике дробь отделяется точкой.\nDouble #  Давайте отдельно рассмотрим пример деления с целыми и дробными числами. Сначала целые числа:\npublic class IntDiv { public static void main(String[] args) { int a, b, c; a = 1; b = 10; c = a / b; System.out.println(c); } } При делении единицы на десять мы получаем ноль целых и, при использовании типа данных int, после и\u0026hellip; больше ничего не будет. Деление единицы на десять даёт ноль.\n- Сколько айфонов ценой в 1000€ я могу купить за 10€? - Ноль. За 10€ я куплю ноль айфонов. И за 999€ я куплю ровно ноль айфонов.  Результат деления целых чисел (тип данных int) округляется до меньшего целого числа. #  public class IntDiv { public static void main(String[] args) { double a, b, c; a = 1; b = 10; c = a / b; System.out.println(c); } } Но, если мы при инициализации переменных изменим их тип на double, то получим привычное нам 0.1.\nПредставьте, что вы купили десять метров ткани, и на костюм вам надо 7 метров. Сколько костюмов вы сошьёте из 10 метров? Один или полтора? В некоторых случаях нам абсолютно не нужны дробные (с плавающей точкой) числа, а в некоторых — целые.\nНа простейшем примере можно увидеть работу double ещё раз:\npublic class HalloDouble { public static void main(String[] args) { final double PI = 3.14; // final - используется для \u0026#34;финализации\u0026#34; переменной,  // теперь переменной PI нельзя присвоить другое значение.  double r = 5.5; double k = r * r; double s = PI * r * r; System.out.println(k); // промежуточный результат  System.out.println(s); } }    Тип Максимальное позитивное значение Минимальное позитивное значение Размер (бит)     float 3.4028234663852886E+038 1.4012984643248171E-045 32   double 1.7976931348623157E+308 4.9406564584124654E-324 64    Экспоненциальная запись #  Экспоненциальная запись — представление действительных чисел в виде мантиссы (дробной части логарифма числа) и порядка. Удобна при представлении очень больших и очень малых чисел, а также для унификации их написания.\n1_000_000 - один миллион: 1,0Е+6 соответствует один умножить на десять в шестой степени.  Что использовать нам в программе? Float или double #  У меня два ответа на этот вопрос.\nВариант один. Пока вы учитесь, используйте double. Он проще не требует буковок после цифры или дополнительного кастинга.\nВариант два. Производительность программы с float ровно в два раза выше, чем с double. Если вам важно делать свой код изящнее, то вы всегда должны понимать, какие типы данных уместнее использовать.\nДавайте попробуем сделать программу, которая считает степень двойки.\npublic class HalloDouble2 { public static void main(String[] args) { double a = 2; double b = 30; double c = Math.pow(a, b); System.out.println(c); // Выводит на экран 1.073741824E9  } } Достаточно интересный вопрос: что происходит при пересечении разных типов данных? Что произойдёт, если тип переменных int встретится с double? Я подготовил программу без единой строчки комментария. Попробуйте предугадать то, что Java выведет на экран.\npublic class IntToDouble { public static void main(String[] args) { int var1 = 5; int var2 = 2; int var3 = var1 / var2; double var4 = 5.0; double var5 = 2.0; double var6 = var4 / var5; double var7 = var1 / var2; double var25 = var1 / var4; System.out.println(\u0026#34;Int Var3 = \u0026#34; + var3); System.out.println(\u0026#34;double Var6 = \u0026#34; + var6); System.out.println(\u0026#34;double Var7 = \u0026#34; + var7); System.out.println(\u0026#34;double Var25 = \u0026#34; + var25); int var11 = (int) (var1 / var4); System.out.println(\u0026#34;Int Var11 = \u0026#34;+ var11); System.out.println(\u0026#34;Магия \u0026#34; + 5.0/var2); } } Результат работы IntToDouble:\n Int Var3 = 2 double Var6 = 2.5 double Var7 = 2.0 double Var25 = 1.0 Int Var11 = 1 Магия = 2.5  Результат работы подтверждает, что int находится в пределах double и легко может использоваться в расчётах, где результатом будет число типа double. К сожалению, обратное невозможно. Мы должны преобразовать тип данных — произвести Casting. Пример кастования из нашего IntToDouble: int var11 = (int) (var1 / var4), где int в скобках — и есть преобразование.\nПомимо вычисления степени числа, математическая библиотека Java (Math) предлагает нам метод, который генерирует случайное число. Дотошный разработчик скажет, что это не случайное число, а псевдослучайное, но на нашем уровне обучения псевдослучайности достаточно для работы в Java.\nДавайте, в качестве примера, сгенерируем число от 30 до 100:\npublic static void main(String[] args) { int min = 30; int max = 100; int result = (int) (Math.random() * ((max - min) + 1)) + min; System.out.println(result); } Метод Math.random() представляет результат в виде дробных чисел типа double. Нам нужны целые числа, поэтому мы \u0026ldquo;кастуем\u0026rdquo; результат в нужный тип данных.\nМетод Math.random() генерирует дробные числа между 0 и 1. Поэтому мы с помощью арифметики приводим случайное число между нулём и единицой в случайное число между 30 и 100. Попробуйте получить число между 1 и 50. Поэкспериментируйте с этим методом. Он нам понадобится не один раз.\nМетод Math.random() является одним из многих подготовленных для вас методов, которые часто требуются при программировании. Возведение в степень, число PI, логарифмы и многое другое. Вы можете ознакомиться с официальной документацией к библиотеке Math — здесь\nОстался, может быть, вопрос, что использовать? Если нет особой надобности в учебных целях или для скорости разработки — используйте double и int. Остальные типы данных требуют более бережного отношения и внимания.\nДомашнее задание #   Написать программу для вычисления площади круга. Найти длину окружности. Написать формулу вычисления стоимости Евро, если курс Евро к Доллару 1,1. Найти соотношение площади Беларуси к площади Украины. Найти, во сколько раз площадь Москвы больше площади Берлина. Если клиент положил в банк 1000€ под 3,5%, какая сумма будет его ждать через семь лет?  Дополнительные материалы #   Полезная библиотека - Math Конвенция java договор о правописании и синтаксисе Округление чисел - https://geekbrains.ru/posts/java_round  "});index.add({'id':13,'href':'/school/java/basic-course/004-java-char-string/','title':"004 Java Char String",'content':"Типы данных char и String: примеры применения — введение в Java 004 #  Char #    Таблица символов   Если в программе нужны символы, то для этого мы пользуемся типом данных char. Например:\npublic class HelloChar { public static void main(String[] args) { char zahl = 100; // Сотый по счёту символ в таблице  char octal = \u0026#39;\\u039A\u0026#39;; // Вызов определённого символа кодом  char zeichen = \u0026#39;A\u0026#39;; // Буква A  char tabulator = \u0026#39;\\t\u0026#39;; // В русском языке клавиша называется \u0026#34;Таб\u0026#34;  // Табулятор  char phi = \u0026#39;\\u03A6\u0026#39;; // Греческая буквая Фита - PHI  System.out.println(zahl); System.out.println(octal); System.out.println(zeichen); System.out.print(tabulator); System.out.println(phi); } } Объект базового (примитивного) типа char является 16-битным символом Unicode.\nМы можем вывести любое сообщение или любой символ. однако достаточно сложно вывести на экран кавычки, ведь в них мы и держим значения наших переменных. Для таких случаев мы используем экранирование. С помощью обратной косой черты(обратный слеш) мы экранируем символ или используем её для дополнительных параметров.\n\\b Backspace (Курсор двигается на одно место влево) \\n Newline (Новая строчка) \\f Newpage (Новая страница) \\r Carriage return (Курсор становится на первое место в строчке, возврат каретки) \\t Горизонтальный табулятор \\\u0026quot; Двойная кавычка \\' Одинарная кавычка \\\\ Backslash(вызов обратного слэша) \\___ Символы с октальным значением от 000 до 377, например \\304 соответствует символу Ä \\u___ Вызов символа уникода (Unicode-16). Где например \\u00C4 соответствует Ä Таблица символов Windows (charmap) вызывает и показывает именно те символы, которые можно вызвать в Java.\nString #  Мы можем хранить в программе и набор символов: пароль, фамилию, звание, название улицы или просто набор символов. Для хранения таких данных можно использовать String. Пример использования:\npublic class HelloString { public static void main(String[] args) { String firstname = \u0026#34;Andrej\u0026#34;; String secondname = \u0026#34;Podlubnyj\u0026#34;; char copyright = \u0026#39;\\u00A9\u0026#39;; int old = 18; System.out.println(firstname + \u0026#34; \u0026#34; + secondname + \u0026#34; \u0026#34; + old); String student = firstname + \u0026#34; \u0026#34; + secondname + \u0026#34; \u0026#34; + copyright; System.out.println(student); } } Один символ можно записать как \u0026ldquo;маленьким\u0026rdquo; стрингом, так и через символ при помощи типа данных char. Цепочку символов, больше одного, мы храним в типе данных String. Каждый элемент этой цепочки символов можно отобразить при помощи char. Это очень важно понять и запомнить.\nСтроковый набор символов класса String может немного больше, чем просто хранить строчку в переменной. Например, мы можем вычислить количество символов или длину String, используя один из методов, которые есть в Java. Это примерно такие же методы, как те, что мы использовали в предыдущих уроках, чтобы возводить числа в степень или выводить результаты на экран:\nint dlina; dlina = student.length(); System.out.println(dlina); Для переменных типа String ява заготовила много дополнительных методов, которые делают нашу жизнь проще. Например метод substring, который вырезает из одной цепочки символов другую.\nНапример:\npublic class WhatCanYouDoString { public static void main(String[] args) { String name = \u0026#34;AndrejPodlubnyj\u0026#34;; int dlina = name.length(); System.out.println(name); System.out.println(dlina); // вырезать символы с 6-го по 15-ый \tString firstName = name.substring(6,15); dlina = firstName.length(); System.out.println(firstName); System.out.println(dlina); } } Если мы пишем приложение для веб-сайта с \u0026ldquo;user generated content\u0026rdquo;, то мы можем столкнуться с тем, что часть контента пишется заглавными буквами. В Java есть методы, которые приводят цепочку символов алфавита к прописным (заглавным) или к строчным (маленьким) буквам. Давайте рассмотрим пример:\npublic class UppercaseAndLowercase { public static void main(String[] args) { String articleTitle = \u0026#34;london is the capital\u0026#34;; articleTitle = articleTitle.substring(0,1).toUpperCase() + articleTitle.substring(1); System.out.println(articleTitle); articleTitle = articleTitle.toUpperCase(); System.out.println(articleTitle); System.out.println(articleTitle.toLowerCase()); } } С помощью метода toUpperCase() мы делаем буквы прописными, с помощью метода toLowerCase() мы приводим значение строки к строчным буквам.\nМы обязательно вернёмся к этому и другим возможностям класса. Пока надо только запомнить, что, если мы хотим создать записную книжку, то фамилию и имя абонента мы скорее всего будем хранить с помощью типа данных String.\nЯвные и неявные преобразования #  Значения, передаваемые переменным, можно привести в тот тип данных, которые переменная может принять. Вручную или автоматически, или явно и неявно.\nРасширение типа (widening Casting), которое можно проследить на схеме с помощью стрелок, происходит автоматически. Это преобразование меньшего типа данных в типа большего размера: byte -\u0026gt; short -\u0026gt; char -\u0026gt; int -\u0026gt; long -\u0026gt; float -\u0026gt; double.\nСужение типа (narrowing Casting) — преобразование типа данных большего размера в тип данных меньшего размера — делается вручную: double -\u0026gt; float -\u0026gt; long -\u0026gt; int -\u0026gt; char -\u0026gt; short -\u0026gt; byte\npublic class MyClass { public static void main(String[] args) { int myInt = 9; double myDouble = myInt; // Automatic casting: int to double  System.out.println(myInt); // Outputs 9  System.out.println(myDouble); // Outputs 9.0  } } public class MyClass { public static void main(String[] args) { double myDouble = 9.78; int myInt = (int) myDouble; // Manual casting: double to int  System.out.println(myDouble); // Outputs 9.78  System.out.println(myInt); // Outputs 9  } } Допустим, у нас имеется старая база данных, где все данные записаны в строковом виде. Например просто текстовый файл столбиком. Java даёт нам возможность \u0026ldquo;спарсить\u0026rdquo; целочисленные данные из строк.\nString number = \u0026quot;10\u0026quot;; int result = Integer.parseInt(number); System.out.println(result); Дополнительные материалы #   По ссылке можно посмотреть все методы, которые поддерживает тип данных String. Сервисы \u0026ldquo;быстрая ссылка\u0026rdquo; и онлайн-компиляторы:   https://www.tutorialspoint.com/compile_java_online.php https://ideone.com/ytQajk https://www.browxy.com/  Домашнее задание #    Найти в интернете таблицы для типа данных char. Проверить, что они действительно соответствуют тому, что выводит Java на экран. Найти \u0026ldquo;смешные\u0026rdquo; символы, символ стандартного смайлика, найти символ телефона, параграфа, копирайта(C), торговой марки(тм), рубля, евро, доллара, знаков зодиака, шахмат, червы.\n  Вбить в поисковую строку Windows \u0026ldquo;charmap\u0026rdquo;.\n  Найдите самостоятельно статьи на тему:\n Что такое юникод? Что такое ASCII? Что такое UTF?    Что будет, если сложить переменную String с самой собой? Можно ли умножить её на саму себя? Почему?\n  Вывести на экран сообщение в кавычках. Например собственное имя + \u0026ldquo;профессия\u0026rdquo;.\n  Вывести на экран построчно анкетные данные: Имя, Фамилия, Адрес, Улица и тд и тп. Пример вывода одной строчки:\n - Имя пользователя: Андрей    Вырезать из выражения \u0026ldquo;Вход разрешён\u0026rdquo; последние 8 символов и добавить \u0026ldquo;воспрещён\u0026rdquo;.\n  Вывести на экран \u0026ldquo;Осторожно, вход воспрещён\u0026rdquo; заглавными буквами.\n  "});index.add({'id':14,'href':'/school/java/basic-course/005-java-boolean/','title':"005 Java Boolean",'content':"Тип данных boolean и логические операторы — введение в Java 005 #    Правда или ложь   Boolean #  Boolean в Java — это логический тип данных. Переменная типа boolean может принимать всего два значения — это правда или ложь — true \u0026amp; false. Эти два значения обозначаются в других языках и часто выдаются на экран как 1 и 0, но всё же не равны этим значениям: например, выражение boolean b = 0; приведёт к ошибке при компиляции программы. Но мы можем сравнить переменные или выполнить логическую операцию с типом данных boolean:\nint a = 1, b = 2; boolean bool = a \u0026lt;= b; Говоря о булевых или логических типах данных, нам придётся освежить свои воспоминания о булевой алгебре и возможных логических операциях.\nТаблица истинности #     a b a \u0026amp; b a I b a ^ b ! a     false false false false false true   false true false true true true   true false false true true false   true true true true false false    Давайте представим себе пример из жизни: мы ищем на сайте все статьи, которые мы опубликовали и комментировали. Должны быть два совпадения — это вариант a \u0026amp; b. Или мы ищем все статьи, в которых есть упоминание слов \u0026ldquo;алгебра\u0026rdquo; или \u0026ldquo;математика\u0026rdquo; — это a | b. А отыскать все статьи, которые написаны не нами, можно, применив логический оператор !a.\nИ так далее, и так далее. Ключевые слова для повторения школьного материала: таблица истинности, булева алгебра, теория множеств, конъюнкция, дизъюнкция.\nС помощью таблицы с результатами логических операций можно перепроверить работу Java:\npublic class NewBoolean { public static void main(String[] args) { boolean a, b, c; a = true; b = false; c = a \u0026amp; b; System.out.println(c); // returns false because only one of the two required values​is true  int d = 1, f = 2; boolean bool = d \u0026lt;= f; int i = 10; int j = 9; System.out.println(i \u0026gt; j); // returns true, because 10 is higher than 9  System.out.println(10 == 15); // returns false, because 10 is not equal to 15  int x = 10; System.out.println(x == 10); // returns true, because the value of x is equal to 10  } } Надо понимать, что значение вашего чекбокса (галочки) на сайте Facebook при регистрации — \u0026ldquo;с правилами ознакомлен и согласен\u0026rdquo; — и есть значение булевой переменной в программе.\nЛогические операторы, которые поддерживаются Java #     Логический операторы Значение     == Проверка на соответствие (допустим, что a равен b)   != Не равно (если a не равно b, то)   ! Отрицание, логическое не   \u0026amp; Логическое И, and   | Логическое или, or    ^ Исключительное или, XOR   \u0026amp;\u0026amp; Укороченный \u0026amp;   || Укороченный или    Амперсанд — это название знака \u0026amp;.\nМы ещё раз рассмотрим данные операторы позже. Пока мы должны понимать, что с арифметическими операторами всё немного сложнее, чем хотелось бы.\nДополнительные материалы #   Булева алгебра — самое важное Булева алгебра Теория множеств Очень неплохая статья simulator — симулятор логических выражений в электротехнике. Очень помог мне в своё время вспомнить булеву алгебру.  Домашнее задание #   Что выдаст программа, если запросить значения a, b, c, d, e, f? Посчитайте сначала в уме и проговорите вслух, что делает каждая строчка. boolean a = (7+8)*5 \u0026gt; 7+8*5; boolean b = (7+8)*4 != 7+4*5; boolean c = 3+4 \u0026gt; 9+1 \u0026amp; 16-5 \u0026gt; 3*4; boolean d = 16/2 \u0026lt; 6+2 | 4+5 \u0026lt;= 4*5; boolean e = !(3*4 \u0026lt; 7+8);  Напишите программу и проверьте свои результаты. Сравните строчку вывода со своей: System.out.println(a + \u0026quot;\\n\u0026quot; + b + \u0026quot;\\n\u0026quot; + c + \u0026quot;\\n\u0026quot; + d + \u0026quot;\\n\u0026quot; + e);  Повторение String: Найдите метод из официальной библиотеки и покажите его работу. По возможности используйте printf.  Булева алгебра #  Булева алгебра, ударение на первый слог. БУлева.\nПринципиально основы булевой алгебры не должны были давать в школе. Программисты учат её в институте.\nДавайте я попробую на пальцах рассказать основы и то, что нам понадобится на минимальном уровне.\nДизъюнкция #   Когда мама ИЛИ папа дают мне деньги на карманные расходы, то я бегу и покупаю себе мороженное.\n Знакомая ситуация, деньги можно получить в трёх случах из четырёх. В одном случае же деньги может дать и мама, и папа, тогда и друга можно угостить мороженным.\nЭто дизъюнкция.\nДизъюнкция - логическое сложение, логическое ИЛИ, включающее или, просто \u0026ldquo;или\u0026rdquo;(англ. OR; нем. ODER) В Java операторы \u0026ldquo;|\u0026rdquo; и \u0026ldquo;||\u0026rdquo;\nboolean a = false, b = true, c; c = a | b; Пример в технике; дублирование выключателя или кнопки, дверной звонок и звонок у калитки вызывают одну и туже реакцию - включается мелодия звонка.\nКонъюнкция #  Конъюнкция - логическое \u0026ldquo;И\u0026rdquo;, логическое умножение, просто \u0026ldquo;И\u0026rdquo;, \u0026ldquo;AND\u0026rdquo;, \u0026quot;\u0026amp;\u0026quot;.\nВ Java оператор \u0026quot;\u0026amp;\u0026quot; и \u0026quot;\u0026amp;\u0026amp;\u0026quot;.\nboolean a = false, b = true, c; c = a \u0026amp; b;  Если светит солнце \u0026ldquo;И\u0026rdquo; у меня выходной, то я иду купаться на озеро.\n Пример из жизни. Ядерный чемоданчик могут активировать только два офицера одновременно. По отдельности чемодан остаётся неактивным.\nАнтиваленц #  \u0026ldquo;XOR\u0026rdquo;, эксклюзивное или, \u0026ldquo;EOR\u0026rdquo;, \u0026ldquo;EXOR\u0026rdquo;. В Java оператор \u0026ldquo;^\u0026rdquo;.\nboolean a = false, b = true, c; c = a ^ b;  Только на горных лыжах в Австрии или на лошадях у бабушки в деревне я забываю про свою работу.\n  Или ты садишься за математику или я расскажу всё отцу.\n ИЛИ - ИЛИ. Исключительное или.\nЛампочка в больнице может работать от городского электричества или от дизельного генератора в подвале. Но не от двух источников одновременно.\nОтрицание #  Negation. NOT. В Java оператор \u0026rdquo;!\u0026quot;.\nboolean a = false, b; b = !a; Давайте представим огромный станок по продольной распилке леса. В цеху есть две кнопки. Зелёная и красная. При включении зелёной пила должна работать. При нажатии на красную пила должна остановится.\nДомашнее задание #  Задача. Петя, Вася и Маша остались дома одни. Кто-то из них ел варенье. На вопрос мамы, кто это сделал, они сказали:\n Петя: \u0026ldquo;Я не ел. Маша тоже не ела.\u0026rdquo; Вася: \u0026ldquo;Маша действительно не ела. Это сделал Петя\u0026rdquo; Маша: \u0026ldquo;Вася врет. Это он съел.\u0026rdquo;  Выясните, кто ел варенье, если известно, что двое из них оба раза сказали правду, а третий один раз соврал, а один раз сказал правду.\nОтвет к задаче для собственной сверки\n"});index.add({'id':15,'href':'/school/java/basic-course/006-java-switch-case/','title':"006 Java Switch Case",'content':"Switch и Case: оператор выбора — введение в Java 006 #  В этом уроке мы рассмотрим на примерах оператор выбора Switch и опции выбора Case.\nПример:\n За пятёрку в четверти по математике папа обещал мне велосипед. За четвёрку в четверти по математике мама купит мне GoPro4. За тройку меня, наверное, не будут ругать. За двойку меня отругают. За единицу меня \u0026ldquo;убьют\u0026rdquo;.    Опять двойка   Типичный жизненный пример, который можно написать на Java:\npublic class SwitchOne { public static void main(String[] args) { int оценкаВЧетверти = 1; String награда; switch (оценкаВЧетверти) { case 5: награда = \u0026#34;Велосипед\u0026#34;; break; case 4: награда = \u0026#34;GoPro4\u0026#34;; break; case 3: награда = \u0026#34;Награды не будет\u0026#34;; break; case 2: награда = \u0026#34;Потерянный час времени и плохое настроение\u0026#34;; break; case 1: награда = \u0026#34;Лучше не спрашивайте\u0026#34;; break; default: награда = \u0026#34;Такой оценки не существует\u0026#34;; break; } System.out.println(награда); } } Мы видим, что каждая оценка заканчивается брейком: если брейк не ставить, то выбор селектирует следующую награду. Удобно, если у нас одинаковый результат на несколько переменных. Заканчивается ввод данных дефолтным выбором, который выдаётся при получении непредусмотренных данных или, лучше сказать, всех остальных неуказанных.\nПри наличии множественных выборов удобно использовать Switch и Case. Направо пойдёшь коня потеряешь, прямо\u0026hellip;. Это именно тот случай, где уже можно использовать такой алгоритм действий.\nПервый же пример из поиска приведёт нас к календарю. Это наиболее используемый пример в учебниках. 12 месяцев с уникальным названием и ID:\npublic class SwitchDemoCalendar { public static void main(String[] args) { int month = 8; String monthString; switch (month) { case 1: monthString = \u0026#34;January\u0026#34;; break; case 2: monthString = \u0026#34;February\u0026#34;; break; case 3: monthString = \u0026#34;March\u0026#34;; break; case 4: monthString = \u0026#34;April\u0026#34;; break; case 5: monthString = \u0026#34;May\u0026#34;; break; case 6: monthString = \u0026#34;June\u0026#34;; break; case 7: monthString = \u0026#34;July\u0026#34;; break; case 8: monthString = \u0026#34;August\u0026#34;; break; case 9: monthString = \u0026#34;September\u0026#34;; break; case 10: monthString = \u0026#34;October\u0026#34;; break; case 11: monthString = \u0026#34;November\u0026#34;; break; case 12: monthString = \u0026#34;December\u0026#34;; break; default: monthString = \u0026#34;Invalid month\u0026#34;; break; } System.out.println(monthString); } } В результате работы данной конструкции мы получаем переменную с нужным значением. В последнем случае \u0026ldquo;monthString\u0026rdquo;, или в случае с оценкой, \u0026ldquo;награда\u0026rdquo;. Абсолютно простая конструкция, где самое сложное — синтаксис, который просто надо выучить. И, после написания 30 различных примеров без шпаргалок, он в крови.\nДля закрепления рассмотрим ещё один пример:\npublic class SwitchCoffee { public static void main(String[] args) { int a = 1; //номер кнопки в кофе-автомате \tswitch (a) { case 1: System.out.println(\u0026#34;Кофе американо готовится\u0026#34;); break; case 2: System.out.println(\u0026#34;Кипяток сейчас будет\u0026#34;); break; case 3: System.out.println(\u0026#34;Кофе эспрессо готовится\u0026#34;); break; case 4: System.out.println(\u0026#34;Какао уже в пути\u0026#34;); break; case 5: System.out.println(\u0026#34;Вода кипятится\u0026#34;); System.out.println(\u0026#34;Кофе мелется\u0026#34;); System.out.println(\u0026#34;Сливки добавляются\u0026#34;); break; default: System.out.println(\u0026#34;повторите свой выбор, напиток под номером: \u0026#34; + a + \u0026#34; Временно недоступен\u0026#34;); break; } System.out.println(\u0026#34;Программа отработана без ошибок\u0026#34;); } } Можно заметить, что в пятом кейсе последнего примера с кофе-автоматом запускается множество сообщений. Мы можем использовать один кейс для запуска нескольких директив. Но это не рекомендуется из-за плохой читаемости кода. Обычно Switch используется для изменения одной переменной. Но это не значит, что вы такого не встретите в чужом коде.\npublic class CoffeeMashine { public static void main(String[] args) { int choose = 2; myChoose(choose); } public static void myChoose(int choose) { switch (choose) { case 3: latte(); break; case 2: americano(); break; case 1: cappucino(); break; default: americano(); } } public static void latte() { System.out.println(\u0026quot;---\u0026quot;); System.out.println(\u0026quot;We are created latte for you master\u0026quot;); milk(40); coffee(30); water(70); System.out.println(\u0026quot;---\u0026quot;); } public static void cappucino() { System.out.println(\u0026quot;---\u0026quot;); System.out.println(\u0026quot;We are created cappucino for you master\u0026quot;); milk(30); coffee(40); water(20); System.out.println(\u0026quot;---\u0026quot;); } public static void americano() { System.out.println(\u0026quot;---\u0026quot;); System.out.println(\u0026quot;We are created americano for you master\u0026quot;); milk(0); coffee(40); water(10); System.out.println(\u0026quot;---\u0026quot;); } public static void water(int ml) { System.out.printf(\u0026quot;Added %d ml of water \\n\u0026quot;, ml); } public static void milk(int ml) { System.out.printf(\u0026quot;Added %d ml of milk \\n\u0026quot;, ml); } public static void coffee(int ml) { System.out.printf(\u0026quot;Added %d ml of coffee \\n\u0026quot;, ml); } } Перед домашним заданием хочется привести ещё один пример применения Switch/Case в жизни: обычный лифт в многоэтажном здании. В зависимости от номера нажимаемой кнопки, лифт едет (ожидаемо) на нужный этаж. Оператор выбора Switch используется вокруг вас везде.\n  Лифт   Дополнительные материалы #  https://docs.oracle.com/javase/tutorial/java/nutsandbolts/switch.html\nДомашнее задание #   Напишите программу действий кассира магазина, если у него пытаются купить алкоголь следующие 5 покупателей: 10 лет, 17 лет, 18 лет, 20 лет и 30 лет. Напишите программу, которая определяет сезон года. Месяца указаны int переменными.  "});index.add({'id':16,'href':'/school/java/basic-course/007-java-if-else/','title':"007 Java if Else",'content':"Условный оператор if, if-else — 6введение в Java 007 #    если, то   В прошлом уроке я рассматривал оператор выбора Switch. Оператор IF имеет схожие функции и примерно те же цели. Основные отличия — в используемых условиях. Кстати, как обычно, верить мне необязательно: можно спросить у Google, например \u0026ldquo;java switch vs if сравнение\u0026rdquo;. Только на Хабре я нашёл несколько статей, рассматривающих эстетическую сторону вопроса, вопрос скорости, эффективности и вопрос используемых методов.\nПример: поездка в летний лагерь.\nЕсли от родителей будет разрешение (true), то я поеду в летний лагерь. Иначе я останусь на всё лето дома.\nif (true){ System.out.println(\u0026#34;я поеду в летний лагерь\u0026#34;); } else { System.out.println(\u0026#34;я останусь на всё лето дома\u0026#34;); } Switch нет смысла использовать с булевыми значениями: т.к. это всего два варианта. И это одно из отличий if-else и switch.\nСразу про плюсы: If-else позволяет запускать несколько (больше) одной команд.\npublic class IfElseKosmo { public static void main(String[] args) { int a = 5; final int SUPERCONSTANT_G = 10; // модификатор final обозначает константность переменной, которую невозможно изменить.  // например, ускорение свободного падения на поверхности Земли или  // PI, которое всегда константо. Кроме этой особенности final на результаты вычисления  // не влияет  if (a \u0026lt; SUPERCONSTANT_G){ System.out.println(\u0026#34;Первоночальное ускорение недостаточно\u0026#34;); System.out.println(\u0026#34;Ракета не может стартовать\u0026#34;); System.out.println(\u0026#34;Подготовить аварийные службы\u0026#34;); } else { System.out.println(\u0026#34;Ракета улетает в космос\u0026#34;); System.out.println(\u0026#34;Выпустить пресс-релиз об успешном запуске\u0026#34;); System.out.println(\u0026#34;Подготовить программистов к государственным наградам\u0026#34;); } } } В предыдущем уроке был очень жизненный пример про кассира, алкоголь и несовершеннолетних. В Switch нельзя указать \u0026ldquo;младше 18\u0026rdquo;. А в if else можно:\npublic class AlkogolIfElse { public static void main(String[] args) { int возрастПокупателя = 40; if (возрастПокупателя \u0026lt; 16){ System.out.println(\u0026#34;Алкоголь и сигареты продавать нельзя!!!\u0026#34;); } else if (возрастПокупателя \u0026gt;= 18){ System.out.println(\u0026#34;Можно продавать алкоголь и сигареты\u0026#34;); } else { System.out.println(\u0026#34;Водку продавать ещё нельзя, а пиво и сигареты уже можно\u0026#34;); } } } Переменные набраны кириллицей в учебных целях и, чтобы показать, что такое может пройти. Но считается плохим и очень плохим тоном использовать не ASCI символы в переменных.\nИногда программисты печально шутят, что вся жизнь кодера состоит из написания различных if else и Switch команд. Отчасти так и есть. В фундаменте Java не так много команд. И одну из самых часто употребляемых вы только что изучили.\n  Витязь   Дополнительные материалы #   The if-then and if-then-else Statements: https://docs.oracle.com/javase/tutorial/java/nutsandbolts/if.html  Домашнее задание #   Напишите программу действий для сотрудника дорожной полиции, который остановил машину:  при езде до 50 км/час нарушений нет; за езду от 50 км/час до 65 км/час — устное порицание и лекция на 5 минут; за превышение скорости от 16 км/час — 40 евро штрафа; за езду от 100 км/час до 130 км/час — штраф 500 евро; и за езду свыше 130 км/час — штраф в 1000 евро, конфискация прав на 3 года и конфискация транспортного средства.   Напишите программу, которая объяснит наступление определённых событий, в зависимости от выбора \u0026ldquo;витязя\u0026rdquo;. Напишите программу для машины на светофоре. Что делать, если горит красный, жёлтый или зелёный свет. Метод вывода даты на экран монитора принимает 3 целочисленных значения(день, месяц, год) и разделитель (например \u0026ldquo;-\u0026quot;). Проверить значения данных на адекватность, и если надо дописать нули.\n- 5.6.2020 должно быть выведено на экран как \u0026ldquo;05-06-2020\u0026rdquo; - 50.40.2020 не должно быть выведено вообще  "});index.add({'id':17,'href':'/school/java/basic-course/008-java-modulo/','title':"008 Java Modulo",'content':"Modulo — модуль деления, введение в Java 008 #  Modulo — в специализированной литературе \u0026ldquo;modulo\u0026rdquo; называется оператором деления по модулю или взятием модуля деления. В Java обозначается знаком \u0026ldquo;процентов\u0026rdquo; - %.\nИспользуется это в программировании, например для перевода десятичных чисел в двоичные. Не надо путать этот оператор с делением \u0026ldquo;/\u0026rdquo;. Замечу, что в Википедии на данный момент по запросу modulo выводится статья про \u0026ldquo;деление с остатком\u0026rdquo; . На мой взгляд это очень сильно дезориентирующие определение. Модуль деления — это вычисление остатка от деления целых чисел. Хотелось бы привести оба оператора и показать разницу.\n56 % 24 = 8; 56 / 24 = 2; 24 дважды помещается в 56 и ещё в остатке имеем 8. Читается это так : — Целочисленный остаток от деления 56 на 24 равно 8.\nЯ выговариваю это так: \u0026ldquo;56 модуло 24 равно 8\u0026rdquo;\nС делением дела обстоят немного по другому. Если мы говорим только о целых числах \u0026ldquo;int\u0026rdquo;, то при делении 56 на 24 получаем 2.\nПростейший пример в Java выглядит вот так:\npublic class Modulo { public static void main (String[] args ) { int x = 85; int y = 7; System.out.println(x + \u0026#34; mod \u0026#34;+ y + \u0026#34; = \u0026#34; + x % 7); System.out.println(x + \u0026#34; / \u0026#34;+ y + \u0026#34; = \u0026#34; + x / 7); } } На экране мы получаем:\n85 mod 7 = 1 85 / 7 = 12 Дополнительная литература #   Деление с остатком - https://ru.wikipedia.org/wiki/%D0%94%D0%B5%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5_%D1%81_%D0%BE%D1%81%D1%82%D0%B0%D1%82%D0%BA%D0%BE%D0%BC  Домашнее задание #   Дано число меньше 3000. При делении числа на 32 получается остаток 30, при делении на 58 - остаток 44. Найдите число или числа. Программы, которая находит:  високосный год простые числа чётные числа    "});index.add({'id':18,'href':'/school/java/basic-course/009-java-arithmetic-operators/','title':"009 Java Arithmetic Operators",'content':"Операторы в Java — введение в Java 009 #  Мы уже использовали многое в наших программах не задумываясь. Например знаками знакомыми нам из школьной математики: +, -, = и др.. Пришло время узнать весь список доступных в Java операторов и применение.\nЗаранее скажу, что для введения в Java достаточно понимать первые две таблицы - арифметические операторы и операторы сравнения.\nАрифметические операторы - arithmetic operators #     Оператор Пример использования Пояснение     + a + b Сложение   - a - b Вычитание (также унарный минус)   * a * b Умножение   / a / b Деление   % a % b Деление по модулю   ++  Инкремент, а++ соотвествует а = а + 1   \u0026ndash;  Декремент, а\u0026ndash; соотвествует а = а - 1   += a += b Сложение с присваиванием Выражение a += b эквивалентно значению a = a + b.   -= a -= b Вычитание с присваиванием   *= a *= b Умножение с присваиванием   /= a /= b Деление с присваиванием   %= a %= b Деление по модулю с присваиванием    Знак +, ой, простите, оператор сложения может быть и оператором конкатенации. Конкатенация = объединение, сцепление. Мы с ним знакомы, когда цепляем один String с другим. Мы их не складывали, а конкатенировали.\nОператоры сравнения #  Мы с ними немного познакомились при рассмотрении: тип данных boolean и логические операторы.\n   Оператор Пример Пояснение     == a == b a соотвествует(равно) b   != a != b a не соотвествует(не равно) b   \u0026gt; a \u0026gt; b а больше b   \u0026gt;= a \u0026gt;= b а больше либо равно b   \u0026lt; a \u0026lt; b а меньше b   \u0026lt;= a \u0026lt;= b а меньше либо равно b   \u0026amp;\u0026amp; a \u0026amp;\u0026amp; b а и b истинны, b оценивается условно (если а ложно, b не вычисляется)   || a || b а или b истинно, b оценивается условно (если а истинно, b не вычисляется)   ! !a а ложно   \u0026amp; a \u0026amp; b AND, а и b истинны, b оценивается в любом случае   | a | b OR, а или b истинно, b оценивается в любом случае   ^ a ^ b XOR, а и b различны (исключительное или, побитовое логическое или)    Побитовые операторы #  Побитовые операторы работают с целыми числами, то есть с типами данных long, int, short, char(!), byte.\n   Оператор Пояснение     ~ Побитовый унарный оператор NOT   \u0026amp; Побитовый AND   \u0026amp;= Побитовый AND с присваиванием   | Побитовый OR   |= Побитовый OR с присваиванием   ^ Побитовый исключающий OR   ^= Побитовый исключающее OR с присваиванием   \u0026raquo; Сдвиг вправо   \u0026raquo;= Сдвиг вправо с присваиванием   \u0026raquo;\u0026gt; Сдвиг вправо с заполнением нулями   \u0026laquo; Сдвиг влево   \u0026laquo;= Сдвиг влево с присваиванием   \u0026raquo;\u0026gt;= Сдвиг вправо с заполнением нулями с присваиванием    Это далеко не простая тема и требует повторения/изучения математической состовляющей. Но теоретически можно изучать Java и дальше, оставив эту тему на когда-нибудь потом, самое главное никому не говорите, что я это сказал. А если серьёзно, то изучив эту тему вы станете на один шаг ближе к \u0026ldquo;стать программистом\u0026rdquo;.\nДоп. ссылки:\n Битовый сдвиг Побитовые операции в Java Побитовые операторы RAID  Логические операторы #     Логический операторы Значение     == Проверка на соотвествие (допустим, что a равен b)   != Неравно (eсли a неравно b, то)   ! Отрицание, логическое не   \u0026amp; Логическое И, and   | Логическое или, or   ^ Исключительное или, XOR   \u0026amp;\u0026amp; Укороченный \u0026amp;   || Укороченный или   \u0026amp;= AND с присваиванием   |= OR с присваиванием   ^= XOR с присваиванием   ?: Тернарный (троичный) условный оператор    Тернарный оператор достаточно интересен, мы его обязательно рассмотрим отдельно в следующих уроках.\nОператоры присваивания #  Операторы присваивания содержат в себе знак равенства =. Все их мы уже рассмотрели в рамках других операторов. И в этом нет никакого противоречия. Java многогранна и её не всегда можно однозначно описать простым языком кожаных мешков. Тот же += является одновременно оператором арифметическим и присваивания.\nЭто не значит, что вы не можете составить таблицу операторов сравнения самостоятельно.\nДля факультативного изучения #    Помимо всего прочего, операторы бывают унарными. Соответственно существуют бинарные и тернарные операторы. Логические операторы \u0026amp;\u0026amp; и || - это укороченные версии операторов \u0026amp; и |.   Отличие заключается в том, что например в укороченной версии (или), если первый операнд имеет значение (true), то выражение сразу становится (true) и второй операнд даже не рассматривается. То же самое и с (и), если первый операнд имеет ложное значение (false), то и все выражение сразу становится (false), второй операнд не рассматривается. И соответственно благодаря тому, что значение второго операнда вычислять не нужно, экономится время и повышается эффективность кода.\nПример:\npublic class AndAnd { public static void main(String[] args) { if(a() \u0026amp;\u0026amp; b()){ //здесь меняем оператор и сравниваем результаты  System.out.println(\u0026#34;Готово\u0026#34;); }else{ System.out.println(\u0026#34;Не получилось\u0026#34;); } } public static boolean a(){ System.out.print(\u0026#34;Hallo \u0026#34;); return false; } public static boolean b(){ System.out.println(\u0026#34;World\u0026#34;); return true; } }   //Если использовать оператор \u0026amp;\u0026amp;, то\n  Hallo Не получилось\n  //Вывод при использовании оператора \u0026amp;\n  Hallo World\n  Не получилось\n  Если должны быть проверены все условия, то надо использовать \u0026amp;. Если речь идёт о быстром и чётком решении, то \u0026amp;\u0026amp; помогает сэкономить ресурсы и время.\nДомашнее задание #   Ознакомьтесь с термином - body mass index (BMI) Индекс массы тела . Напишите программу расчёта индекса массы тела. Если возникнут сложности, помните, что у вас есть все знания, что бы решить данную задачу. Просто решите её сначала на бумаге, а потом перенесите в Java.  Дополнительные материалы #   https://docs.oracle.com/javase/tutorial/java/nutsandbolts/opsummary.html https://docs.oracle.com/javase/tutorial/java/nutsandbolts/operators.html https://docs.oracle.com/javase/tutorial/java/nutsandbolts/op2.html Прекраснейшая статья о побитовом сдвиге - https://javarush.ru/groups/posts/1925-pobitovihe-operacii https://www.baeldung.com/java-compound-operators  Очень рекомендую последний ресурс - 4. www.baeldung.com. На проекте очень много грамотных постов о Java и из мира Java. Можно ввести в Google запрос \u0026ldquo;baeldung cast int\u0026rdquo; и получить прекрасную статью для самостоятельного изучения конвертации данных из типа данных String в int. Ресурс определённо в закладки.\n"});index.add({'id':19,'href':'/school/java/basic-course/010-java-for/','title':"010 Java For",'content':"Цикл FOR — введение в Java 010 #    петля   Каждый день я встаю в шесть утра и иду на завод к восьми, в семь вечера я уже снова дома, смотрю кино по телевизору, курю с соседом на лестничной клетке и в одиннадцать уже иду спать. Утром вторника повторяется всё то же самое, и в среду, и в четверг, и в пятницу.\nВсё это можно описать, например, с помощью блока if else. Ничего сложного: если понедельник, то подъём; а если вдруг вторник, то тоже подъём; если среда, то подъём и т.д. и т.п. Но кусок кода повторяющийся, и для таких случаев придумали циклы, один из них — цикл FOR. Условно, с понедельника по пятницу выполняется следующий алгоритм действий: подъём, работа, телевизор, спать. Пример:\npublic class FourWeek { public static void main(String[] args) { int weekDays = 7; for (int i = 1; i \u0026lt; weekDays ; i++) { System.out.println(\u0026#34;------------\u0026#34;); System.out.println(\u0026#34;Новый день\u0026#34;); System.out.println(\u0026#34;я встаю в шесть утра\u0026#34;); System.out.println(\u0026#34;иду на завод к восьми\u0026#34;); System.out.println(\u0026#34;я уже дома\u0026#34;); System.out.println(\u0026#34;смотрю кино по телевизору\u0026#34;); System.out.println(\u0026#34;курю с соседом на лестничной клетке\u0026#34;); System.out.println(\u0026#34;иду спать\u0026#34;); System.out.println(\u0026#34;День подошёл к концу\u0026#34;); System.out.println(\u0026#34;-------------\u0026#34;); } } } Область видимости #  Мы можем использовать несколько циклов подряд:\npublic class Main { public static void main(String[] args) { int a = 0; for (int i = 0; i \u0026lt; 10; i++) { a++; } for (int i = 0; i \u0026lt; 20; i++) { a++; } System.out.println(a); System.out.println(i); } } При этом операции над переменной a будут проходить в каждом цикле, потому что a принадлежит к области видимости всего метода. А вот попытка вывести на консоль i приведёт к ошибке. Переменная i, в данном случае, объявлялась только в циклах, и за пределами самого цикла не видна. Именно поэтому мы и смогли декларировать эту переменную дважды. Потому что в самом методе её как бы и нет.\nМы можем экранировать переменные просто скобками:\npublic class Main { public static void main(String[] args) { int a = 0; { int b = 7; a = a + b; } System.out.println(a); System.out.println(b); } } В данном примере попытка \u0026ldquo;распечатать\u0026rdquo; b приведёт к ошибке. Декларация переменной произошла в экранированном участке кода. Но операции с a программа запомнит, потому что программа декларировала a, и закрытый участок кода для а — просто часть программы. Сверху вниз смотреть можно, а снизу вверх смотреть нельзя.\nИ снова к самому циклу for #  Это могут быть и арифметические операции:\npublic class FourTest { public static void main(String[] args) { int a = 20; int b = 11; int c; for (int i = 0; i \u0026lt; a; i++) { b = b + i; c = i + 1; System.out.println(\u0026#34;c \u0026#34; + c); } System.out.println(\u0026#34;b \u0026#34; + b); } } В определённом или в заданном интервале мы изменяем переменную по определённой формуле.\nfor (начало; условие; шаг) { // ... тело цикла ... в котором можно выполнять одну, две, три или даже очень много операций. } for (initialization condition; testing condition; increment/decrement){ statement(s) } For — это цикл, в котором \u0026ldquo;тело\u0026rdquo; выполняется заданное количество раз.\nНачало, условие, шаг #  Начало, условие, шаг надо запомнить не как \u0026ldquo;Отче наш\u0026rdquo;. А \u0026ldquo;Отче наш\u0026rdquo; заменяется теперь на \u0026ldquo;начало, условие, шаг\u0026rdquo;. Ещё один пример, где мы работаем только с одной переменной — отсчёт обратного времени. Именно этот код используется всеми космодромами при запуске ракет в космос:\npublic class TickTackStart { public static void main(String[] args) { for (int i = 10; i \u0026gt; 0; i--) System.out.println(\u0026#34;i= \u0026#34; + i); } } Начало может быть любым. Другой переменной int i = b или любым (обычно int) числом. Например, int i = 7.\nУсловие задаёт рабочий интервал между началом и концом программы.\nШаг может быть любым. Минус два, плюс два, минус 100 или плюс 5000. Шаг мы задаём сами. В шаге мы можем складывать, вычитать, умножать и даже делить: i = 2*i.\nfor (int i = 0; i \u0026lt; 20; i = 2*i){ System.out.println(i); } И это уже домашнее задание #    Определите на глаз, что будет выдано на консоли после запуска последнего куска кода?\n  Даны целые числа A и B, где B \u0026gt; 0. Вывести B раз число A.\n  Вывести в порядке возрастания все числа между А и B, где а = 5, а B = 17.\n  Сколько раз будет выведено сообщение на экран?\nfor (int i = 3; i \u0026lt; 10; i ++){ System.out.println(i); }   \u0026ldquo;Нарисуйте\u0026rdquo; (выведите на консоль) треугольник из звёздочек, используя только одну звёздочку и то, что только что изучили:\n  * ** *** **** ***** ****** ******* ******** ********* ********** Дополнительные материалы #   https://docs.oracle.com/javase/tutorial/java/nutsandbolts/for.html  "});index.add({'id':20,'href':'/school/java/basic-course/011-java-methods-void-return/','title':"011 Java Methods Void Return",'content':"Методы в Java немного подробнее: возвратные и исполняющие-введение в Java 011 #  Главный метод класса #  public static void main(String[] args) Каждый раз пишем эту магическую строку что бы запустить нашу программу. MAIN - обозначает точку входа в программу. Мы можем один раз написать этот метод в главном классе, например Main:\npublic class Main { public static void main(String[] args) { // просто тестирование  } } Следующим методом мы можем написать метод сложения двух целых чисел. Название метода addition мы пишем с маленькой буквы.\n\tstatic void addition (){ int a = 4; int b = 5; int c = a + b; System.out.println(c); } И тогда мы можем в нашей точке входа запустить(вызвать) метод сложения и весь наш класс тогда будет выглядеть вот так:\npublic class Main { public static void main(String[] args) { addition(); } static void addition() { int a = 4; int b = 5; int c = a + b; System.out.println(c); } } Создание класса #  Точно также мы можем создать совсем новый класс для вычисления целых чисел. И назвать его Calculator, и в нём написать наш метод:\npublic class Calculator { static void addition() { int a = 4; int b = 5; int c = a + b; System.out.println(c); } } Аргументы #  Мы можем сделать метод принимающим параметры(атрибуты, аргументы), например так:\n\tstatic void addition (int a, int b){ System.out.println(a+b); } Тогда запустить этот метод в Main можно, давайте сначала подумаем как, а потом попробуем посмотреть:\nCalculator.addition(a, b); //Запускать метод мы можем один или несколько раз Calculator.addition(4, 7); Calculator.addition(17, 25); Метод сам по себе у нас может быть нетронутым и только в месте его вызова мы \u0026ldquo;манипулируем\u0026rdquo; с аргументами.\nТипы методов #  Принципиально в Java два типа методов:\n Исполняемые (void). Эти методы просто исполняют команды. Возвратные. Эти методы всегда что-то возвращают.  Пример метода, который возвращает значение int:\npublic static int devide() { int a = 0; return a; } Пример метода, который возвращает int и принимает два int аргумента\npublic static int devide(int a, int b) { return a / b; } Пример метода, который принимает String, а возвращает int:\npublic static int vornameAndName(String vorname, String name) { int result = vorname.length() + name.length(); return result; } Очень важно понимать, что main вход в программу, с этого метода начинаются необходимые действия. Например на условной кассе в магазине в точке мейн запускается процесс подсчитывания стоимости продуктов, и после этого стоимость передаётся в метод вывода чека на печать и ещё раз на экране у кассира. Нет хороших или плохих методов, удобных или неудобных; это просто инструменты и левша может использовать другие инструменты чем правша. \u0026ldquo;Правильность\u0026rdquo; особо нигде не прописана.\nЕщё один пример. Нам надо поехать в отпуск:\npublic class Main { public static void main(String[] args) { weGoOnVacation(); } static void weGoOnVacation() { // псевдометод, который описывает, что надо сделать что бы поехать в отпуск \tbookFlights(); bookHotel(); packUp(); callTaxi(); excellentMood(); } static void excellentMood() { //каждый из этих методов описывает как добиться поставленной цели. а может вызывать и другие дополнительные методы. \t// например для хорошего настроения нужно отключиться от работы и улететь туда где тепло\t\t} } Зарезервированные слова #     Нельзя использовать в переменных     abstract double int super   boolean else interface switch   break extends long synchronized   byte final native this   case finally new throw   catch float package throws   char for private transient*   class goto* protected try   const* if public void   continue implements return volatile   default import short while   do instanceof static     Модификаторы доступа. Private, protected, default, public #   private; default; protected; public.  Private — наиболее строгий модификатор доступа. Он ограничивает видимость данных и методов пределами одного класса.\nDefault — package visible.\nProtected — package visible.\nProtected data member and method are only accessible by the classes of the same package and the subclasses present in any package. You can also say that the protected access modifier is similar to default access modifier with one exception that it has visibility in sub classes.\nPublic — Кто угодно может этим пользоваться.\n   _ Class Package Subclass(same pkg) Subclass(diff pkg) World     public + + + + +   protected + + + +    no modifier + + +     private +        Модификатор static в Java #  Static показывает, что это метод или переменная класса. На данном этапе большего нам знать пока не надо.\npublic class HelloStatic { private static int count = 10; public static void main(String args[]) { System.out.println(count); //compile time error \t} } Дополнительные материалы #   https://www.oreilly.com/library/view/think-java/9781491929551/ch04.html https://docs.oracle.com/javase/tutorial/java/javaOO/returnvalue.html https://www.baeldung.com/java-methods Ещё раз ссылка с конвенцией (договор о правописании и синтаксисе) - https://www.oracle.com/technetwork/articles/javaee/codeconventions-135099.html https://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html  Домашнее задание #   Давайте попробуем написать методы для вычисления площади и периметра фигур: квадрата, прямоугольника, треугольника, круга. И один раз напишем их исполняющими, а один раз возвратными. В обоих случаях методы должны принимать необходимые данные для вычисления: как радиус, длину сторон или прочее. Давайте напишем генератор паролей. Методу передаётся длина пароля. И метод генерирует пароль используя латиницу, цифры и некоторые спецсимволы(на ваш выбор). Подсказка - использовать только те знания, которые были уже изучены. Существует как минимум два(на самом деле 222) разных подхода к решению этой проблемы. Не бойтесь пробовать.  "});index.add({'id':21,'href':'/school/java/basic-course/012-java-while-dowhile/','title':"012 Java While Dowhile",'content':"Цикл While и Do While #  Это самая лёгкая глава. Потому что цикл while — родной брат цикла for.\nПример:\npublic class WhileWeAreYoung { public static void main(String[] args){ int i = 0; while(i \u0026lt; 10){ System.out.println(i); i++; } } } Изученный цикл for мы бы написали так:\npublic static void main(String[] args) { for (int i = 0; i \u0026lt; 10 ; i++){ System.out.println(i); } } В цикле for стоит условие, и в while стоит условие. While цикл только проверяет правильность условия. В какой-то мере while может заменить связку for + if: \u0026ldquo;пока дети младше 18 лет — алкоголь не продавать\u0026rdquo;.\nИногда мы можем предполагать, что операция запустит бесконечный процесс или процесс, который невозможно выполнить современными средствами. Тогда нам помогает break — выход из цикла.\nНапример, такое возможно при подсчёте степени двойки (вспоминаем задачу про шахматную доску) или при подсчёте точного числа PI или при вычислении ряда Фибоначчи.\nwhile (true){ System.out.println(i); i++; if (i \u0026gt; 20) //код break; // выход из цикла } Если вам он кажется достаточно спорным, помните, что ситуации бывают разными.\nУ цикла while есть кузен do-while:\ndo { Команда(); } while(Булевое выражение) Например:\n// Декларирование и инициализация переменной int i = 0; // Команда, которая будет выполнена минимум один раз do { // Команда выполняется трижды System.out.println(\u0026quot;i равно \u0026quot;+ i); // Инкриментирование переменной i+=10; } // Условие выхода из цикла while(i \u0026lt;= 20); Цикл while называют циклом с предусловием.\nЦикл do while — циклом с постусловием.\nВ первом случае (while) код будет выполнен, согласно данным входа, во втором случае (do while) код будет выполнен минимум один раз, и только потом будет проверка на выход из цикла.\nЦикл — определение #  Циклы — это разновидность управляющих конструкций для организации многократного выполнения одного и того же участка кода.\nКод внутри такой управляющей конструкции выполняется циклично. Каждое выполнение кода — это итерация цикла. Количество итераций регулируется условием цикла. Код, который выполняется внутри цикла, называют телом цикла.\nПример использования while #  78 из десятичной системы переводим в двоичные 1001110.\n78 : 2 = 39 остаток: 0 39 : 2 = 19 остаток: 1 19 : 2 = 9 остаток: 1 9 : 2 = 4 остаток: 1 4 : 2 = 2 остаток: 0 2 : 2 = 1 остаток: 0 1 : 2 = 0 остаток: 1 Решение с помощью while\npublic static String convertDecimalToBinary(int decimal) { int remainder; String output = \u0026quot;\u0026quot;; while (decimal \u0026gt; 0) { remainder = (decimal % 2); output = Integer.toString(remainder) + output; decimal = decimal / 2; } return output; } Дополнительные материалы #  While, Do While: https://docs.oracle.com/javase/tutorial/java/nutsandbolts/while.html\nДомашнее задание #   Перепишите примеры из урока 10 с использованием новых знаний. Попробуйте написать вложенные циклы с помощью While и Do-While  "});index.add({'id':22,'href':'/school/java/basic-course/013-java-scanner/','title':"013 Java Scanner",'content':"Scanner #  Я хочу ввести немного магии в наши программы. Мы уже пользовались и пользуемся для вывода результатов командой System.out.println(). Возможность ввода данных через терминал в программу также существует.\nimport java.util.Scanner; public class WhileScanner { public static void main(String[] args) { Scanner input = new Scanner(System.in); int old; System.out.println(\u0026#34;Сколько тебе лет? \u0026#34;); old = input.nextInt(); if (old \u0026gt;= 18){ System.out.println(\u0026#34;Ты можешь купить на вечер что-то более крепкое, чем чай\u0026#34;); break; // выход из цикла \t} } } Удачное ли использование цикла while в примере выше?\nМы снова используем внешнюю библиотеку и в первой строчке мы её импортируем.\nВ строчке Scanner input = new Scanner(System.in); мы объявляем переменную input, которая будет отвечать за введённые в терминал данные.\nОбратите внимание на оператор new – с его помощью мы работаем с \u0026ldquo;непростыми данными\u0026rdquo;. Позже мы к нему вернёмся.\nПока же просто воспользуемся \u0026ldquo;сканером\u0026rdquo; и присвоим значение введённых данных переменной нашей old. С помощью old = input.nextInt(); мы передаём введённые целочисленные данные. Мы можем \u0026ldquo;перехватывать\u0026rdquo; данные любого типа. Просто мы должны записывать их в соответствующие переменные.\nДополнительные материалы #  Подробнее о Scanner\nДомашнее задание #   Напишите программу, которой надо представиться. Данные, которые спрашивает машина: имя, фамилия, пол, возраст, e-mail. Для считывания данных типа String используйте метод next(): input.next() Напишите программу, которая принимает из \u0026ldquo;сканера\u0026rdquo; возраст человека в строке и отдаёт его в вашу переменную int. В [четвёртой главе]/school/java/basic-course/004-java-char-string/) мы коротко рассматривали один из способов передачи такой информации. Напишите программу, которой надо представиться. Данные, которые спрашивает машина: имя, фамилия, пол, возраст, e-mail. Для считывания данных типа String используйте метод next(): input.next()  Интерактивные программы - игры #   Компьютер загадывает число от 1 до n. У пользователя k попыток отгадать. После каждой неудачной попытки компьютер сообщает меньше или больше загаданное число. В конце игры текст с результатом (или “Вы угадали”, или “Попытки закончились”). Президент приходит к власти если набрал 51% голосов избирателей. Создайте машину для ввода результатов выборов.  "});index.add({'id':23,'href':'/school/java/basic-course/014-java-binary-and-decimal-issue/','title':"014 Java Binary and Decimal Issue",'content':"Двоичная, десятичная, восьмеричная и прочие системы в Java и преобразования между ними. #    символы майя   Для усвоения этого урока достаточно знать циклы for (while, do-while), оператор выбора switch, условный оператор **if **, знание и уверенное пользование арифметическим оператором modulo.\nЭто один из лучших примеров, который показывает, что первоначально абсолютно неподъёмная задача при решении оказывается не такой уж и страшной.\nМы уже рассматривали во главе, которая знакомила нас с while как из десятичных чисел получить двоичные.\nПовторение, 78 превращаем в 1001110.\n78 : 2 = 39 остаток: 0 39 : 2 = 19 остаток: 1 19 : 2 = 9 остаток: 1 9 : 2 = 4 остаток: 1 4 : 2 = 2 остаток: 0 2 : 2 = 1 остаток: 0 1 : 2 = 0 остаток: 1 Давайте переведём двоичное число в десятичное. Давайте возьмём уже известное нам число 1001110. В одном байте восемь битов. Число 1001110 состоит из семи цифр. В таких случая часто дописывают недостающие ноли и 100_1110 превращается в 0100_1110. Это удобно и очень важно при визуализации чисел.\n   Порядковый номер цифры в числе 7 6 5 4 3 2 1 0     Степени двойки 2^7 2^6 2^5 2^4 2^3 2^2 2^1 2^0   Чему в итоге равны степени 128 64 32 16 8 4 2 1   Пример двоичного числа 0 1 0 0 1 1 1 0   Как считается десятичное 0*128 1*64 0*32 0*16 1*8 1*4 1*2 0*1   Результат вычислений 0 64 0 0 8 4 2 0    Сумма чисел из последней строчки 64+8+4+2 = 78\nЕсли с приведёнными примерами всё понятно, то можно перейти дальше и записать оба примера в Java.\nПереведём число из двоичной системы в десятичную, пока не забыли.\npublic static int convertBinaryToDecimal(int binaryDigit) { int decimal = 0; int n = 0; int temp = 0; while (binaryDigit \u0026gt; 0) { temp = binaryDigit % 10; decimal += temp * Math.pow(2, n); binaryDigit = binaryDigit / 10; n++; } return decimal; } Следом попробуем перевести из десятичных обратно в двоичные.\npublic static String convertDecimalToBinary(int decimal) { int remainder; String output = \u0026quot;\u0026quot;; while (decimal \u0026gt; 0) { remainder = (decimal % 2); output = Integer.toString(remainder) + output; decimal = decimal / 2; } return output; } Замечу, что это простейший метод преобразования, который работает только с целыми числами больше нуля. Однако краткость этого метода должна помочь понять суть методики. Единственное, что стоит особенно подчеркнуть - результат работы метода строковое значение.\nЕсли поработать над читаемостью метода convertDecimalToBinary, то мы заметим, что у нас (как минимум) дважды используется magicNumber 2 . Если мы догадаемся назвать это число systemIndex, то это будет частью решения метода convertDecimalToAnything.\npublic static String convertDecimalToAnything(int decimalDigit, int systemIndex) { int remainder; String output = \u0026quot;\u0026quot;; while (decimalDigit \u0026gt; 0) { remainder = (decimalDigit % systemIndex); output = Integer.toString(remainder) + output; decimalDigit = decimalDigit / systemIndex; } return output; } Теоретически, можно подумать как из бинарной системы перевести числа в любую другую систему. Но зачем? Если есть метод преобразования бинарного числа в десятичную систему, а потом в любую другую.\nУ нас только одна проблема, наша система работает с числами систем меньше десятичной. Для того, что бы нам одолеть системы свыше десятичной, нам надо понять, что происходит с числом, когда его делят на 11, 12, 13, 14, 15, 16 и так далее. И здесь нам должен помочь switch, который будет перехватывать результаты деления свыше 10 и подставлять в output вместо числовых значений буквенные A, B, C, D, E, F и так далее.\nРекомендую в рамках Java ограничиться целыми позитивными числами до шестнадцатеричной системы. Она нам важна, так как в ней информатике хранят цветовую гамму.\nДополнительные ссылки #   Троичный компьютер  Шестнадцатеричная система Двадцатиричная система Шести десятеричная Двенадцатеричная система счисления Цифры майя  Домашнее задание #   Ознакомиться со всеми дополнительными ссылками. Самостоятельно ознакомиться с методом Java Integer.parseInt(); Написать свой собственный класс ConvertDigits  добавить интерактивность, общение программы с пользователем. Не использовать цикл while.    Задачи с повышенным уровнем сложности. #   Написать метод, который решает вопрос с делением на числа из систем свыше десятичной - 11-16. (Факультатив)Написать метод перевода числа из \u0026ldquo;любой\u0026rdquo; системы в десятичную. // Мы вернёмся к этому методу в будущем.  "});index.add({'id':24,'href':'/school/java/exercises/01-exercises-java/','title':"01 Exercises Java",'content':"Задачи Java Boolean введение - 01 #  Задачи на усвоение булевых значений в Java. Достаточно знать тип данных boolean, желательно(рекомендуется) знать условный оператор if-else.\n Родители Васи Сидорова купили умный сейф и запрограммировали его на выдачу денег по отпечатку пальцев одного из родителей. smartDepositBox(true, false) -\u0026gt; true smartDepositBox(false, true) -\u0026gt; true smartDepositBox(false, false) -\u0026gt; false  После покупки сейфа в семье начался разлад по поводу выделению сыну денег и родители решили сейф перепрограммировать, таким образом, что бы он выдавал деньги только при обоюдном согласии родителей. smartDepositBoxVersionTwo(true, false) -\u0026gt; false smartDepositBoxVersionTwo(false, true) -\u0026gt; false smartDepositBoxVersionTwo(false, false) -\u0026gt; false smartDepositBoxVersionTwo(true, true) -\u0026gt; true  К родителям Васи Сидорова приехала Бабушка и сказала, что родители не умеют воспитывать сына и она сама знает, когда давать ребёнку деньги. Напишите программу выдачи денег Васе, если бабушка выдаёт деньги независимо от решения родителей. verySmartDepositBox(mamaPermission, papaPermission, omaPermission)  Родители Василия добились успехов в программировании и смогли передать свои знания сыну. Василий вырос и запрограммировал систему аварийного уничтожения первых космических кораблей земли, улетевших в Альфа-Центавру. Система уничтожения реагирует на ввод команд двух старших офицеров корабля. bigBadaBoom(true, true) -\u0026gt; true bigBadaBoom(false, false) -\u0026gt; false bigBadaBoom(true, false) -\u0026gt; false  На даче у родителей Васи Сидорова решили поставить звонок, который должен звонить при нажатии на кнопку звонка у калитки или у двери дома. Если соседские дети начинают играться и нажимать на кнопки звонка одновременно и на калитке и на доме, звонок не должен реагировать. Напишите программу управления звонком. doorbell(true, true) -\u0026gt; false doorbell(false, false) -\u0026gt; false doorbell(true, false) -\u0026gt; true  Программирование всё больше захватывало семью Василия и они решили сделать полностью умный дом. Для начала они решили сделать входную дверь учитывая новые стандарты. Дверь больше нельзя открыть обычным ключом, пока в доме есть интернет и она подключена к электросети. Напишите тесты для программы smartDoorCheckKey. Заказчик(бабушка Василия), хочет, что бы мы проконтролировали работу сторонней фирмы. Сторонняя фирма не справилась с написанием программы. Напишите самостоятельно метод, который возвращает false, если дверь открыть ключом нельзя. Родители сделали в итоге самостоятельно всё программирование вокруг двери не дожидаясь нас. Попробуйте угадать как же работает метод, которрый позволяет Василию открыть дверь телефоном, отпечатком пальца или введённым с клавиатуры паролем. verySmartDoor(false, true, false) -\u0026gt; true verySmartDoor(false, false, true) -\u0026gt; true verySmartDoor(true, false, false) -\u0026gt; true verySmartDoor(false, false, false) -\u0026gt; false   "});index.add({'id':25,'href':'/school/java/exercises/02-exercises-java/','title':"02 Exercises Java",'content':"Закрепление пройденного материала - 02 #   методы и классы в Java простые типы данных Switch  Задачи #   Даны два целых числа. Верните true, если одно из этих чисел находится в диапазоне от 10 до 20 включительно. Написать метод String getStringMonth(int month ),который принимает номер месяца, а возвращает название. В main распечатать результат работы метода. Учитывая int n, возвращайте true, если он находится в пределах 10 от 100 или 200. Примечание: Math.abs(num) вычисляет абсолютное значение числа.  nearHundred(93) → true nearHundred(90) → true nearHundred(89) → false   Реализовать метод double getPercent(double amount, double interest) который считает указанный процент (interest) от указанного числа (amount ). Например getPercent (1000.0, 10.0), должно вернуть 100. В main распечатать результат работы метода. Реализовать метод, который принимает название валюты (например, \u0026ldquo;EUR\u0026rdquo;,\u0026ldquo;RUR\u0026rdquo;,\u0026ldquo;USD\u0026rdquo;,\u0026ldquo;GPB\u0026rdquo;) и выдает курс к доллару. Естественно, \u0026ldquo;USD\u0026rdquo; возвращает 1.0 Стоимость электроэнергии рассчитывается исходя из стоимости одного киловатт-часа в 20 центов.\nБазовая плата - 30€. В базовую плату входят 100 киловатт-часов. Напишите метод расчёта стоимости пользования электроэнергией.  Задачи с повышенным уровнем сложности #   Реализовать программу “конвертер валют”  Реализовать метод, который принимает название валюты (например, “EUR”,”RUR”,”USD”,”GPB”) и выдает курс к доллару. Естественно, “USD” возвращает 1.0 . Используя метод из предыдущего пункта написать метод, который принимает пару валют (“GPB”,”EUR”) и возвращает курс обмена. Используя метод из предыдущего пункта реализовать метод который получает пару валют и сумму в первой валюте, возвращает сумму во второй валюте.   В старых советских хрущёвках города № решили поменять деревянные окна и двери на пластиковые. Выяснилось, что все двери в хрущёвках одинакового размера 2м*90см, а окна разные, но в каждой квартире могут быть только одинаковые окна. Стоимость переделки окон рассчитывается из стоимости стекла - 100€ за квадратный метр и стоимости косяка - погонный метр 100€. Стоимость дверей рассчитывается исходя из стоимости косяка (как и у окна) и стоимости самой двери 120€ за квадратный метр. Напишите программу, которая поможет стройтресту №12 правильно выставлять счета. Школа приняла на работу молодую учительницу геометрии. И первым делом она решила привести кабинет точных наук в порядок. В подвале школы были найдены:   точная копия спутника земли ПС-1. Диаметр сферы 58см. жестяной куб со стороной 40см. правильная четырёхугольная пирамида \u0026ldquo;Хеопса\u0026rdquo; со стороной основания 20см и боковыми рёбрами 30см и чёрный ящик с размерами 80см * 30см * 20см.\nВсё было в достаточно запущенном состоянии и новая учительница решила всё покрасить в красный цвет.\nСколько денег на покраску нужно потратить если на один квадратный метр надо 560мл краски, а балончик с аэрозольной краской 400мл стоит 17€?  "});index.add({'id':26,'href':'/school/java/exercises/03-exercises-java/','title':"03 Exercises Java",'content':"Задачи для закрепления цикла for #  Вложенные циклы и работа с данными\nПрямоугольник #  При вызове метода rectangle(5, 7); на экране появился прямоугольник. Что написано в методе rectangle?\n******* ******* ******* ******* ******* Floyd`s triangle #  Треугольник Флойда является прямоугольным треугольником из натуральных чисел. Он назван в честь Роберта Флойда . Строки треугольника заполняются последовательными номерами, начиная с 1 в верхнем левом углу:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Трое неизвестных #  нужно написать алгоритм вывода на экран всех возможных комбинаций 3-х натуральных чисел до 36 с определенными условиями:\n необходимо использовать вложенные циклы x \u0026lt;= y \u0026lt;= z xyz = 36  например:\n x=1, y=1, z=36 x=1; y=3; z=12  Шахматная доска #  Выведите на экран в шахматном порядке символы.\n*-*-*-*- -*-*-*-* *-*-*-*- -*-*-*-* *-*-*-*- -*-*-*-* *-*-*-*- -*-*-*-* Таблица умножения #  Выведите на экран таблицу умножения, как показано ниже.\n1 2 3 4 5 6 7 8 9 10 2 4 6 8 10 12 14 16 18 20 3 6 9 12 15 18 21 24 27 30 4 8 12 16 20 24 28 32 36 40 5 10 15 20 25 30 35 40 45 50 6 12 18 24 30 36 42 48 54 60 7 14 21 28 35 42 49 56 63 70 8 16 24 32 40 48 56 64 72 80 9 18 27 36 45 54 63 72 81 90 10 20 30 40 50 60 70 80 90100 Геометрические фигуры #   \u0026ldquo;Нарисуйте/выведите в консоль\u0026rdquo; треугольник из звёздочек используя только одну звёздочку и то что только что изучили:  * ** *** **** ***** ****** ******* ******** ********* **********  Предыдущая задача очень важна. И важно, что бы вы её могли решить самостоятельно. Если решили, то попробуйте усложнить требуемое и нарисуйте равнобедренный треугольник. А после все фигуры из рисунка снизу.    Треугольники   "});index.add({'id':27,'href':'/school/java/exercises/04-exercises-java/','title':"04 Exercises Java",'content':"Задачи для повторения и закрепления материала #  Первая партия задач #   Давайте попробуем написать методы для вычисления площади и периметра фигур: квадрата, прямоугольника, треугольника, круга. И один раз напишем их исполняющими, а один раз возвратными. В обоих случаях методы должны принимать необходимые данные для вычисления: как радиус, длину сторон или прочее. Давайте напишем генератор паролей. Методу передаётся длина пароля. И метод генерирует пароль используя латиницу, цифры и некоторые спецсимволы(на ваш выбор). Подсказка - использовать только те знания, которые были уже изучены. Существует как минимум два(на самом деле 222) разных подхода к решению этой проблемы. Не бойтесь пробовать. Даны натуральные числа от a = 35 до b = 87. Вывести на консоль те из них, которые при делении на 7 дают остаток 1, 2 или 5. а и b должны приниматься методом. Напишите метод(ы)- программу с описанием человеческих действий через комментирование кода или через систему вывода сообщений на экран, из которой понятно как получить утреннюю чашку кофе, а в пятницу вечером бутылку холодного пива. Программу перевода десятичных чисел в двоичные, где пользователь вводит значения через клавиатуру. DONE Мастеру плиточнику Сергею Ивановичу Золотыеруки задают часто один и тот же вопрос. Сколько будет стоить положить плитку на определённом участке.   Нам известно, что в час он кладёт примерно один квадратный метр плитки. Его час стоит 27€ без НДС. Стандартная плитка 30 на 20 сантиметров.  Сергей Иванович обратился к нам за помощью и вам надо написать для него программу.\nКоторая будет принимать размеры стены/пола, стоимость плитки и выдавать:\n Количество требуемых плиток, как целых, так и тех которые надо будет резать. Учтите, что плитку можно класть как вдоль, так и поперёк и только на месте мастер узнает, как именно её надо класть. Стоимость материала Стоимость рабочего времени Итоговую ориентировочную стоимость  Вторая партия задач #   Дано два числа (a и b). Написать метод, который вернет сумму всех чисел между (a и b). Если a равно b, метод должен вернут a+b\nПример: sum(2,4) -\u0026gt; 9 Реализовать метод печатающий таблицу умножения для заданного числа Пример: multiplicationTable(3)-\u0026gt; 3x1=3 3x2=6 …. 3x10=30  Реализовать метод, печатающий все високосные годы в интервале от year1 до year2\nПример: printLeapYears(2000,2009) -\u0026gt; 2000 2004 2008  Реализовать метод, считающий все високосные годы в интервале от year1 до year2\nПример: countLeapYears(2000,2009) -\u0026gt; 3 Напишите метод, который выводит на экран квадрат с заданной стороной символами “*”\nПример: printSquare(4) -\u0026gt; **** **** **** ****  Реализовать метод, который принимает целое положительное число и выводит на экран все положительные числа, на которые заданное число делится без остатка и отображает количество найденных делителей.\nПример: printDivisors(32) -\u0026gt; 32 16 8 4 2 1 Total divisors: 6  Дано два целых положительных числа от 1 до 99. Реализовать метод, который для каждого числа от a до b печатает строку вида “23 рубля”\nПример: printSumInRub(1,5) -\u0026gt; 1 рубль 2 рубля 3 рубля 4 рубля 5 рублей   Третья партия задач #   В одном KByte(килобайт) - 1000 Byte(10^3). В одном KiB(кикибайт) - 1024 Byte(2^10).  Напишите программу, которая например из 100.000 байтов вычисляет сколько это целых KByte(килобайт) и оставшихся Byte. Напишите программу подсчёта (обмана) разницы маркетинговых гигабайт с гигибайтами. Сколько \u0026ldquo;программистких\u0026rdquo; или двоичных мебибайт в десятичных гигабайтах.   Написать программу, которая нам переводит любое десятичное число в двоичное. Напишите программу для перевода из двоичных в десятичные. Написать программу перевода десятичных чисел в восьмеричную систему. Напишите программу перевода чисел из любой(X) системы в любую(Y) систему. Сделайте ограничение для систем выше 32.  "});index.add({'id':28,'href':'/school/tools/01-git/','title':"01 Git",'content':"Git #  Не буду скрывать, Git это та технология, которая не так легко даётся.\nПринципиально, написано достаточно книг, которые всё объясняют намного лучше, чем я когда либо смогу. Именно по этому я написал просто инструкцию для начинающих, где описаны основные приказы, которые тебе понадобятся первое время.\nЕдинственное, что я бы хотел добавить к книгам, которые вам всё равно обязательно надо прочитать, всего несколько предложений.\n Git - это система контроля версий в разработке. Разработка может быть программым кодом, а может быть романом или сценарием к фильму. Не имеет особого значения, что именно мы разрабытываем. В технологии Git используются две важные особенности ветки и коммиты. Коммиты - это точки в во временном континиуме, которые вы создаёте, для того, что бы была возможность к ним вернуться, если всё пойдёт не так. Что-то вроде сохранения, перед биг боссом в конце игровой стадии. Ветки - это линии времени, которые может прожить ваш проект или вы с ним. Эти линии можно сводить в одну. А можно развести в любой точке. А можно вести паралельно две или даже три линии и смотреть как получается.  Всё.\nНадеюсь эти аллегории вас не запутали ещё больше.\nПолезные материалы #   Ссылка на методичку в pdf формате  Лайфхак. #  Другие программисты или администраторы у вас будут спрашивать SSH-ключи.\nДля входа на сервер например, что бы внести вас в администраторы или просто дать доступ. Очень хитрый способ предоставления ключей в любой момент с помощью гитхаба\nhttps://github.com/andron13.keys - ник на гитхабе точка keys и там те ключи, которые вы внесли фля работы с ним. с вероятностью в 99% это то, что у вас спрашивают.\n"});index.add({'id':29,'href':'/school/tools/02-github-basic/','title':"02 Github Basic",'content':"Методичка по работе с Git #  Терминология #     Термин Ссылка Пояснение     Git https://git-scm.com/downloads Git - это очень популярная технология контроля версий, используемая при разработке програмного обеспечения и веб-приложений. Онлайн инструкция на русском языке - https://git-scm.com/book/ru/v2/   Github https://github.com/ Популярный сервис для хранения Git-репозиториев. С 2018 года принадлежит Microsoft   Bitbucket https://bitbucket.org/ Популярный сервис для хранения Git-репозиториев. Принадлежит Atlassian и очень тесно интегрирован с популярными IT-приложениями этой фирмы как Trello или Jira   Gitlab https://gitlab.com/ Альтернативный сервис для хранения Git-репозиториев.    Очень важно понимать, что Git и Github не одно и то же. Дополнительные материалы, книги и ссылки следует обязательно прочитать самому. И прежде всего стоит начать с https://git-scm.com/book/ru/v2/\nПолезная информация #  Для работы новичку достаточно знать несколько приказов и установить саму программу https://git-scm.com/downloads. Все команды ниже надо вводить в окно терминала/консоли. Я использую Git Bash\nСоздание SSH ключа для работы с git сервисами #  Для полноценной работы с git-репозиториями требуется SSH-ключ. У Google можно спросить как его получить - \u0026ldquo;how to generate a new ssh key\u0026rdquo;. Или просто ввести команду ниже, если подробности создания уже известны:\nssh-keygen -t rsa -b 4096 -C \u0026#34;your_email@example.com\u0026#34; Инициализация проекта #  Часто новичкам удобнее создавать проект в пустой папке:\nmkdir newProjectname cd newProjectname git init Добавление в репозиторий файлов #  Добавление в репозиторий файла index.html:\ngit add index.html Добавление в репозиторий всех файлов в папке:\ngit add . Часто эта команда приводит к плохим последствиям. Потому что добавляет не только файлы разработки, но и временные файлы программы и инструментов, в которых работает программист. Рекомендуется добавлять в репозиторий файлы осознанно и поимённо.\nКоммит #  Фиксирование изменений, ещё несколько лет назад именно так переводили этот термин в литературе. Сегодня этот англицизм плотно вошёл во всю техничискую литературу мирa без перевода.\ngit commit -m \u0026#34;комментарий к коммиту, который объясняет изменения\u0026#34; Ветки #  По умолчанию работа ведётся в ветке мастер. Выйти из ветки мастер и войти в новосоздаваемую ветку одним приказом:\ngit checkout -b newBranchName Выйти/вернуться в ветку, которая на проекте уже была создана\ngit checkout master Удалённый репозиторий и работа с ним #  Origin - это адрес вашего репозитория на одном из git-сервисов, которые вы выбрали. К примеру - Gitlab, Bitbucket или Github. Теоретически можно изменить имя удалёного репозитория на любое другое. Но у новичков достаточно путанницы в терминах и командах, чтобы дополнительно усложнять себе жизнь.\nСинхронизировать ветку мастер на локальном компьютере и origin #  Отправить изменения в интернет:\ngit push origin master Обновить локальный репозиторий:\ngit pull origin master Проверить состояние репозитория или лог изменений в ветке:\ngit status git log Дополнительные материалы #  Ask Google - \u0026ldquo;git book online\u0026rdquo;\n"});index.add({'id':30,'href':'/school/tools/03-booleanalgebra/','title':"03 Boolean Algebra",'content':"Булева алгебра #  Булева алгебра, ударение на первый слог. БУлева.\nПринципиально основы булевой алгебры должны были давать в школе. Программисты учат её в институте. Люди, которые не учились в институте и не помнят, что было в школе 300 лет тому назад испытывают серьёзные затруднения в её осознании.\nПри этом всё не так уж и сложно, если у давали в школе.\nДавайте я попробую на пальцах рассказать основы и то, что нам понадобится на минимальном уровне.\nДизъюнкция #   Когда мама ИЛИ папа дают мне деньги на карманные расходы, то я бегу и покупаю себе мороженное.\n Знакомая ситуация, деньги можно получить в трёх случах из четырёх. В одном случае же деньги может дать и мама, и папа, тогда и друга можно угостить мороженным.\nЭто дизъюнкция.\nДизъюнкция - логическое сложение, логическое ИЛИ, включающее или, просто \u0026ldquo;или\u0026rdquo;(англ. OR; нем. ODER) В Java операторы \u0026ldquo;|\u0026rdquo; и \u0026ldquo;||\u0026rdquo;\nboolean a = false, b = true, c; c = a | b; Пример в технике; дублирование выключателя или кнопки, дверной звонок и звонок у калитки вызывают одну и туже реакцию - включается мелодия звонка.\nКонъюнкция #  Конъюнкция - логическое \u0026ldquo;И\u0026rdquo;, логическое умножение, просто \u0026ldquo;И\u0026rdquo;, \u0026ldquo;AND\u0026rdquo;, \u0026quot;\u0026amp;\u0026quot;.\nВ Java оператор \u0026quot;\u0026amp;\u0026quot; и \u0026quot;\u0026amp;\u0026amp;\u0026quot;.\nboolean a = false, b = true, c; c = a \u0026amp; b;  Если светит солнце \u0026ldquo;И\u0026rdquo; у меня выходной, то я иду купаться на озеро.\n Пример из жизни. Ядерный чемоданчик могут активировать только два офицера одновременно. По отдельности чемодан остаётся неактивным.\nАнтиваленц #  \u0026ldquo;XOR\u0026rdquo;, эксклюзивное или, \u0026ldquo;EOR\u0026rdquo;, \u0026ldquo;EXOR\u0026rdquo;. В Java оператор \u0026ldquo;^\u0026rdquo;.\nboolean a = false, b = true, c; c = a ^ b;  Только на горных лыжах в Австрии или на лошадях у бабушки в деревне я забываю про свою работу.\n  Или ты садишься за математику или я расскажу всё отцу.\n ИЛИ - ИЛИ. Исключительное или.\nЛампочка в больнице может работать от городского электричества или от дизельного генератора в подвале. Но не от двух источников одновременно.\nОтрицание #  Negation. NOT. В Java оператор \u0026rdquo;!\u0026quot;.\nboolean a = false, b; b = !a; Давайте представим огромный станок по продольной распилке леса. В цеху есть две кнопки. Зелёная и красная. При включении зелёной пила должна работать. При нажатии на красную пила должна остановится.\nДополнительные материалы #   Прекрасный сайт симулятор для электротехников. Помогает в живую понять основы(и не только) булевой алгебры. http://simulator.io . В последнее время ходили слухи, что проект закроют. Будет невероятно жаль, если сайт не спасут.  Домашнее задание: #  Задача. Петя, Вася и Маша остались дома одни. Кто-то из них ел варенье. На вопрос мамы, кто это сделал, они сказали: а) Петя: \u0026ldquo;Я не ел. Маша тоже не ела.\u0026rdquo; б) Вася: \u0026ldquo;Маша действительно не ела. Это сделал Петя\u0026rdquo; в) Маша: \u0026ldquo;Вася врет. Это он съел.\u0026rdquo;\nВыясните, кто ел варенье, если известно, что двое из них оба раза сказали правду, а третий один раз соврал, а один раз сказал правду.\n"});})();